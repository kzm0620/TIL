１、パッケージの目的
　　　　　・　名前空間を提供し、名前の衝突を避ける
　　　　　・　アクセス修飾子と組み合わせてアクセス制限機能を提供する
　　　　　・　クラスの分類を可能にする。

　　　　　　パッケージは名前の重複を避けるために使われる。
　　　　　　「パッケージ名.クラス名」　の完全修飾クラス名で扱う。
　　　　　　慣習としてドメイン名を逆にした文字列がパッケージ名で使用される。
　　　　　　例として　「xxx.co.jp」　であれば　「jp．co.xxxx」　という具合。

　　　　　　packaege jp.co.xxx;
   public class Sample { ....publicで宣言しないと外部からアクセスできない
    //処理
   }

　　　　　このようにパッケージを使ったアクセス制限をすることで、パッケージ内のクラスを
　　　　　公開、非公開に分類できる。
　　　　　パッケージはディレクトリ構造とマッピングされる。
　　　　　jp ▶︎ co ▶︎ xxx ▶︎ Smple.class


２、パッケージ宣言
　　　　　　クラスが所属するパッケージ宣言は下図のようにpackageキーワードを使って宣言する。
　　　　　　このように宣言すると、Testクラスはsample パッケージに属していることになる。
　　　　　　必ずパッケージ宣言はソースコードの先頭に記述すること。
 
   package sample;     ..........ソースコードの先頭に記述する
     public class Test {
     //処理
   }

３、クラスのインポート
　　　　　インポート宣言しなくても、自動的にインポートされるもの
　　　　　・　java.langパッケージに属するクラス
　　　　　・　同じパッケージに属するクラス

　　　　　　ソースコードは完全修飾クラス名でクラス指定しなければならない

４、プロパイルを実行したときの結果として、正しいものを選ぶ  
   public class Sample {
     protected int num = 10;
   }
 -----------------------------
   package ex4;

   public class SampleImpl extends Sample {
     piblic class static void main(String[]args) {
       System.out.prontln(num);
     }
   }

   A, ０が表示される
   B,　１０が表示される
   C, コンパイルエラーが発生する
   D,　実行時に例外がスローされる
　　　　
   正解… C,コンパイルエラーが発生する
　　　　　　パッケージとクラスのアクセス制限に関する問題。
　　　　　無名パッケージに属するクラスは、同じ無名パッケージに属するクラスから
　　　　　しかアクセスできない。
　　　　　
