【例外】
●プログラム実行時に発生するエラーを「例外」という
➡例外が発生すると例外クラスのオブジェクトが「自動生成」される仕組み
●Javaには発生する例外の種類ごとに対応したクラスが用意されている
●すべての例外の階層の一番上にある「Throwableクラス」から継承されていく

【主要なもの】
・Errrowクラス　➡システムが原因で発生したもの
・Excertionクラス　➡プログラムが原因んで発生したもの
・RuntimeExceptionクラス(Excertionクラスのサブクラス)
　➡プログラムのどこでも発生しうるエラーをまとめたもの

【例外処理】
●例外発生時に自動生成される例外オブジェクトを受け取るために「try-catch」ブロックを書く

try {
  [通常の処理]
} catch(例外クラス オブジェクト名) {
  [例外発生時の処理]
} finally {  (finalyブロックは省略できる)
  [後処理]
}

●catchブロックは複数書くことができるが、複数書くときは「サブクラスから順番に書く」
●サブクラスの型変換は自動でスーパークラスに型変換されてしまう
-------------------------------------------------------------------

【throw と throws】

【throw 例外オブジェクト】
●例外を強制的に「発生」させることができる(処理の中に記述する)
例　void write() {
      try {
        :
      throw new IOException():
        :
   } catch (IOEception e) {
        :
   }

【throws 例外クラス】
●メソッドがその例外を発生することを「宣言」する(メソッド定義文のところに記述する)
　メソッドの中で複数の記述を発生させる可能性がある場合は、
　thrwosの後に例外クラスをカンマ区切りで複数指定できる
例 void write() throws IOException {
       :
   thorow new IOException();
       :
   }
