【クラスライブラリ】

[JDK] (Java Development Kit)
●Javaの開発環境。Oracle社のサイトからダウンロードできる
●JDKの一部とし提供されるクラス群を「クラスライブラリ」
　➡数千個のクラスやライブラリがまとめられている

例  java.lang パッケージ：基本的なクラス
    java.io パッケージ：入出力関連　　　　　　
    java.net パッケージ：ネットワーク関連
　　➡ Java.baseモジュール(モジュールはパッケージをまとめるもの)

【APIドキュメント】
[API] (Application Programming Interfase) 
●アプリケーションやプログラム同士をつなぐもの
　➡開発者はメソッドの呼び出し方さえ分かれば呼び出して利用できる
●クラスライブラリの情報をまとめた「APIドキュメント」
　➡Oracle社のHPからダウンロードができる(Java SE 日本語ドキュメント)
　・Javaのバージョンごとにドキュメントが展開されている(最新は１７)
　・java.baseモジュールに主要な機能が含まれている
●APIドキュメントでよく見るのはパッケージ内のクラスやインターフェースでページ
●フィールド = メンバ変数

[よく使うやつ]
●static指定したメンバ変数は、クラス名.変数名(Syetem.out.~で利用できる)
　➡outはPrintStreamクラスのオブジェクト。　
　　PrintStremクラスのメソッドを使える
●println()は出力後に改行する。print()は改行しない
-----------------------------------------------------------------

【Objectクラス (java.lang)】
●すべてのクラスの「ルート」となるクラス
　➡すべてのクラスはobjectクラスを「継承している」
　　何も継承しないクラスはextends Objectが自動で挿入される

【equalsメソッド】
●boolean equals(Object obj)
　➡自オブジェクトとobjが等しいかを比べる
　stu1.equals(stu2)➡false (==演算子と同じ)
　Objectクラスのequals()メソッドは、変数の中身(アドレス値)を比べる

【toStringメソッド】
●Stirng toString()
　➡オブジェクトの情報を文字列で返す
　　System.out.println(obj)したときは「自動的に」toStringメソッドが呼び出される

--------------------------------------------------------------------

【Stringクラス (java.lang)】
●「""」で囲まれた文字列はStirngオブジェクトになる
●"～"を使うと同じ文字列のオブジェクトが「再利用」される
　➡Stringオブジェクトでは"～"で生成したほうがメモリの効率が良い
　★文字列の比較は「equals()メソッド」を使う

【Stringクラスのメソッド】
・int length()　
　自文字列の文字数を返す
・substring(int begin)　
　自文字列のbegin番目から末尾までの部分文字列を返す
・substring(int begin, int end)　
　自文字列のbegin番目から、end-1番目までの部分文字列を返す
・char charAt(int index)　
　index番目の文字を返す。先頭は０番目
・int indexOf(String s)　
　自文字列で最初にsが現れる位置を返す。見つからない場合は-1を返す
・String replace(char old, char new)　自文字列に含まれる文字oldを文字newに置換した文字列を返す
----------------------------------------------------------------------

【ラッパークラス】
●各基本データ型に対応したクラスを「ラッパークラス」という
●ラッパークラスのクラス名は、基本データ型の１文字目を大文字にする場合が多い
　➡int Integerとchar Characterの二つは少し変わるので注意

例
[基本データ型の書き方]
int i = 10; 
(データ型intを指定して10とう値を入れる書き方)
[クラス型の書き方]
Integer j = new Integer(10);
(オブジェクト名 j でコンストラクタを呼び出す書き方)

●基本データ型のデータをオブジェクトとして包み込むのこと
●基本データ型のラッパークラスの間では自動的に変換される

【Integerクラス】 (java.lang)
●static final int MIN_VALUE 
     //           MAX_VALUE 
　➡int型で使える最小値と最大値を格納できる定数

【parseInt メソッド】(String s)
●s をint型に変換する
例) int i = Integer.parseInt("10");

【toString　メソッド】 (int i)
●i を文字列に変換する
例) String s = Integer.toString(10);
----------------------------------------------------------------

【ArrayList <E>クラス】 (java.util)
●ArrayList <E>クラスはjava.utiパッケージに含まれるので必ずインポートする
●複数のオブジェクトをまとめて管理できる「コレクション」クラスの１つ
●サイズが「動的」に変わるデータ型を「< >(ジェネリックス)」内に指定
・「E」はエレメントの意味
・boolean add(E obj)　：objを最後に追加
・E get(int i)　：　i番目の要素を取得
・int size()　：　リストの要素数を取得
・Integer<E> iterater()　：　イテレータを取得
---------------------------------------------------------------

【Iterater <E>インターフェース】 （Java.util）
●「イテレータ」はコレクション内の要素を指し示すカーソルのようなもの
●基本データ型のデータを扱うときにはジェネリックスにラッパー名を指定する
●コレクションクラスの「iterater()メソッド」で取得できる
・boolean hasNext()　：　次に要素があればtrue
・E next()　：　
　次の要素を返してカーソルを次に移動
　⓵next()メソッドじゃ次の要素を返して⓶カーソルを移動する(処理が２つ)
・void remove()　：　最後に返した要素を削除(バックスペースのイメージ)
------------------------------------------------------------------
