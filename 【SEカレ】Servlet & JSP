●サーバーサイドJavaのポイント
・分業
　プログラマが作るもの　➡　Servlet
　デザイナが作るもの　　➡　JSP (Java Server Pages)

・オブジェクト指向
　内部の仕組みを知らなくても使える大きな部品
　リクエストの処理　requestオブジェクト
　レスポンスの処理　responseオブジェクト

●HTTPとWEBページの仕組み
・静的ＷＥＢページ　サーバー側でプログラムを動かさないあらかじめ作成済の固定的なHTMLファイルなどを返す
・動的ＷＥＢページ　リクエストに合わせてその都度サーバー側で動的に作られたファイルを返す


【統合開発環境Eclipseの設定方法】
・Eclipse ...Javaの統合開発環境
・Apache Tomcat ...WEBアプリケーションサーバー(WEBアプリを実行できるサーバーのこと)
・Pleiades ...Eclipse、Apache TomcatおよびWEｂ開発用のプラグインをまとめたツールセット

●動的WEBプロジェクトの作成
　・アプリを作る単位をプロジェクトと呼ぶ
　・ServletとJSPは、動的プロジェクトの中に作成する

●Eclipseの設定手順
・c:￥pleiades￥eclipseフォルダの中にあるeclipse.exeのアイコンを
　ダブルクリックしてEclipseを起動する
・ワークスペースランチャーというウインドウが開いたら、ワークスペースに、
　.../workspeaceが指定されていることを確認してＯＫボタンをクリックする。
　このフォルダがポロジェクトを保存する場所になる。

・Eclipse1noのウインドウが開いたら、ウインドウメニューで、
　パースペクティブ➡パースペクティブを開く➡その他を選択する
　・パースペクティブを開くウインドウでJAva EEを選択してＯＫボタンをクリックする
　（パースペクティブとは眺望の意味、Eclipseのツールの配置群のこと）

●サーバーを作成する
・Apache TomcatのWEEBアプリケーションサーバーを作成する
・Eclipse下部にあるサーバータブをダブルクリックしてサーバービューを表示し、
　使用可能なサーバーがありません。このリンクをクリックして新規サーバーを作成、、
　をクリックする

・新規サーバーをウインドウでTomcatを選択し、完了ボタンをクリックする
・サーバービューにサーバーが表示される

●サーバーに動的WEBプロジェクトを追加する
・サーバービューでローカルホストのTomcat8をクリックし、追加及および除去、、を選択する
・追加および除去、、ウィンドウで使用可能欄にあるpractiveBasを選択し、
　追加ボタンを押し、構成済み欄に移動させ、完了ボタンをクリックする


【Servletの仕組みと作り方】
・Servletとは、javax.servlet.http.HttpServletクラスを継承してプログラマが作成するクラスである。
・HttpServletクラスは、doGet()メソッドと、doPostメソッド()を持っていて、
　クライアントからGETメソッドによるHTTPリクエストがあるとdoGet()メソッドが呼ばれ、
　POSTメソッドによるHTTPリクエストがあるとdoPostメソッド()が呼ばれる。

・HttpServletクラスを継承したクラスでdoGet()メソッドとdoPostメソッド()を
　オーバーライドしてGETメソッドとPOSTメソッドに対するレスポンスを返す処理を記述する。

・doGet()メソッドとdoPostメソッド()の引数はどちらも
　リクエストとレスポンスを行ってくれるオブジェクトがあらかじめ用意されているということ。

●Servletを実行する方法
・プロジェクトエクスプローラーで、practiveBas➡Javaリソース➡src➡servletの中にある
　RendomServlet.javaをクリックして実行➡サーバーで実行を選択する
・サーバーで実行ウインドウで完了ボタンをクリックする
・動作を確認したらサーバービューでサーバーを停止する
※デフォルトの設定では、Eclipse内蔵のWEｂブラウザが使用される
　ウインドウメニューで、WEBブラウザ➡デフォルトのシステムWEBブラウザを選択すれば、　
　WEBの閲覧で使用しているWEBブラウザ(Googole Creomなど)が使われる

●１～３の乱数を返すServlsetの実行結果
　ページを再読み込みするボタンをクリックすると、毎回１～３の乱数が生成されて表示される
　これが動的なWEBページである



●JSPの仕組みと作り方
・JSPとはHTMLの中に<% と %>で囲んでJavaのコードを挿入したテキストファイルであり、
　ファイル名の拡張子を.jspにする。（実態はServlet)
・アクションタグとEL(Expression Language)を使うと、JSPの中にあるJavaのコードを
　隠すことができる
・クライアント側のWEBブラウザのURL欄にJSPファイルを名を指定してリクエストすると、
　サーバー側でJSPファイルの内容がHTMLファイルを生成するServletのソースコードに
　変換され、それがコンパイルされて実行される


●JSPを実行する方法
・プロジェクトエクスプローラーで、practive➡WebContent1の中にあるrandom,jspを
　➡クリックして実行➡サーバーで実行を選択する
・サーバーで実行ウインドウで完了ボタンをクリックする
・動作を確認したらサーバービューでサーバーを停止する


●フォームのリクエストパラーメーターを取得する方法
・フォームとは、テキストボックスやラジオボタンなどが表示され、
　サブミットボタンのクリックで、ユーザーの入力や洗濯の内容（リクエストパラメータ）を
　サーバーに送るHTMLの機能

・フォームからデータを送るときは、一般的にHTTPリクエストのPOSTメソッドを使う
・一般的にServletリクエストパラメータを受け取り、その結果となる動的なWEBページを
　JSPで作成する、というようにしてServletとJSPを連携させます


●MVCモデルに基ずくServletとJSPの役割分担
・JavaでWEBアプリを作る場合には、以下のように分ける
　・モデル➡通常のJavaのクラスとして作成し、計算処理(ロジックモデル)やデータベースアクセス(データモデル)を行う
　・ビュー➡JSPとして作成し、ユーザーに画面を表示する
　・コントローラ➡Servletとして作成し、ユーザの要求を受け取り、それに基づいてモデルとビューを連結させる。

●フォワードとりダイレクトによる連携
　・フォワード➡ServletからJSPに切り替えること

●JSPを直接リクエストできないようにする
　・MVCモデルでは、Servletがユーザーのリクエストパラメータを受け取り、その処理結果をＪＳＰで返す。
　・もしもユーザーが誤ってJSPファイルを直接リクエストしてしまうと、
　　処理結果の入っていないWEBページが表示されてしまう
　・このようなことがおきないように、一般的にJSPファイルはユーザーが
　　直接リクエストできないフォルダ(EclipseではWebContent/WEB-INF)に格納し、
   ServletからのフォワードでＪＳＰファイルに連携するようにする




●JDBC と DAOパターンによるデータアクセス
　
●JDBCとは
　・MVCモデルのMには計算処理を行うロジックモデルとデータベースアクセスを行うデータモデルがある。
　・JDBC (Java Data Base Connectivity)はDBMSの種類に関わらず、共通的な手順で、
　　Javaからデータベースアクセスを行うためのAPI(クラスライブラリ)群。
　　JDBCを使ってデータモデルを作る

　JDBCの主なクラスをインターフェース (Java.sqlパッケージ)
　・Driver Managerクラス　　　　　　　　➡　DBMSを管理する
　・Connectionインターフェース　　　　　➡　DBMSに接続と切断を行う
　・Prepared Statementインターフェース　➡DBMSにSQL文を送る
　・Result Setインターフェース　　　　　➡　DBMSからSWL文に実行結果を得る
　・SQL Exceptionクラス　　　　　　　　➡　データベースのエラー情報を得る


●これ以降で使用するサンプルデータ
　・ドライバクラス　➡　org.h2.Driver
　・JDBC URL　➡　jdbc:h2:file:C:/pleiades/data/mydatabase
　・ユーザー名　➡　Sample
　・パスワード　➡　なし


●DAOパターンとは
　・DAO (Data Access Object)パターンは、データベースアクセスの関する処理を
　　特定のクラスのまとめること。利用しやすくするというアイディアである。
　・テーブルのレコードを格納するクラスは、テーブル名をクラス名として、
　　Java Beansという形式で作る。
　　EMPLOYEEテーブルなら、Employeeクラスです。
　・テーブルを操作するクラスは、テーブル名DAOというクラス名にするのが一般的。　
　　EMPLOYEEテーブルなら、EmployeeDAOクラスです。

●Java Beansの例
　・何かしらのパッケージに属したクラスとする
　・クラスをpublicにする
　・java.io.Serializableインターフェースを実装する
    (シリアル化可能である印をつけるだけであり、メソッドの実装はない)
　・フィールドをprivateとし、publicなセッタを用意する。
　　ゲッタとセッタの名前はgetフィールド名、setフィールド名とする。
　・publicで引数のないコンストラクタを持つ。


●スコープの種類と使い方
　・スコープ（範囲、視野）
　・WEBアプリケーションサーバは、ServletやJSPが連携する際に受け渡すデータを
　　格納するための記憶領域を持っている
　・この記憶領域は、データの利用範囲によって以下の４つに分けられる
　　・ページスコープ　➡　１つのJSPのページだけで利用できる
　　・リクエストスコープ　➡　１つのリクエストからレスポンスの間に利用できる
　　　フォワード元とフォワード先で共有できるが、リダイレクト先では共有できない
　　・セッションスコープ　➡　WEBブラウザを閉じるまたは削除するまで有効であり、
　　　複数のリクエストにまたがって利用できる。
　　　フォワード先だけでなく、リダイレクト先でも共有できる
　　・アプリケーションスコープ　➡　同じアプリを複数使うユーザーが共有できる

●リクエストスコープのサンプルプログラム
　・HTMLファイルのフォームから入力された番号と氏名を、POSTメソッドでServletに送る。
　・Servletは、javaBeansに番号と氏名を設定してリクエストスコープに格納して、
　　JSPにフォワードする。
　・JSPはリクエストスコープから番号と氏名を取り出し、それらを表示するHTMLを返す


●セッションスコープのサンプルプログラム
　・HTMLでファイルのフォームから入力された番号と氏名を、POSTメソッドでServletに送る
　・Servletは、JavaBeansに番号と氏名を設定してセッションスコープに格納して、
　　別のServletにリダイレクトする。
　・別のServletは、JSPにフォワードする。JSPはセッションスコープから番号と氏名を
　　取り出し、それらを表示するHTMLを返す。



●ELとJSTLでJSPからJavaコードを隠す方法

●ELとは？　JSTLとは？
　・これまでに作成したJSPのプログラムに中には、HYMLのタグとJavaのコードが混在していた。
　　この形式ではプログラミングの知識がないデザイナがJSPを記述するのはとても困難。
　・EL (Expessyon Langueage)とJSP (Java Standard Tag Library)を使うと、
　　JSPの中にあるJavaのコードを隠すことができる。
　・ELはスコープに保存されているJavaBeansのプロパティ(ゲットとセッタで所得されるフィールドの値)を
　　表示するために使う。
　  <%= emp.getName() %>   ➡　　ELの表現  ${emp.name}
　・JSTLは、変数宣言、表示、分岐、繰り返し、リダイレクトなどをタグ形式で実現する

　・JSTLの主なタグ
　　・以下は、Coreタグライブラリで定義されているタグである。
　　・Coreタグライブラwを使うには、JSPに以下のtaglibディレクティブを記述する。
　　　prefix="c"の部分は <c:> というタグがCoreタグライブラリに該当することを意味している。。
　　　<% taglib prefix="c" url="http://java.sun.com/jsp/jst/core" %>

    <c:set>　　　➡変数を設定する
    <c:out>　　　➡変数を出力する
    <c:if>　　   ➡分岐を行う
    <c:forEach>　➡繰り返しを行う


●



