【WEBアプリケーション】
⓵「WEBブラウザ」：WEBページを表示するソフトウェア
⓶「WEBサーバー」：WEBページの情報を提供するソフトウェア(コンピュータ)
　・リクエスト；WEBページの情報をサーバに要求すること
　・レスポンス：リクエストに対してサーバーが情報を返すこと
　　(リクエストでファイル名を省略した場合はindex.htmlなどが自動で呼び出される)
●WEB環境で動くプログラムを「WEBアプリケーション」といい、
　「サーバーサイド(バックエンド)」と「クライアントサイド(フロントサイド)」に分かれる

【Apache Tomcat】
●「WEBサーバー」と「WEBコンテナ」の機能をもつJava製の無料ソフトウェア
　・WEBコンテナ：「サーブレット」と「JSP」の実行環境
　➡自分のPCがサーバーになる

【インストール手順】
　⓵zipファイルをダウンロードして解凍する
　⓶環境変数の設定
  ・CLASSPATH ➡ .;(Tomcatフォルダ)￥lib￥servlet-api.jar
　  (Javaのコンパイラや実行環境がクラスファイルなどを探しに行く場所を指定する環境変数)
  ・CATALINA_HOME ➡ Tomcatフォルダを作成 
    (Tomcatフォルダの場所を指定する環境変数)
●PCの規格に合ったbit数のファイルをインストールする(32.64)


【WEBアプリケーションのフォルダ構成】
●コンテキストルート
　➡WEBアプリケーションの最上位フォルダ。
　・ツリー構造で根(root)にあたるためルートと呼ばれる
　・WEb.INFフォルダか、それ以外かを格納する

【WEBアプリの実行手順】
⓵ファイルを正しい場所に格納
⓶WEBサーバを起動する (bin￥startup.bat)　(SJISで日本語化できる)
⓷ブラウザで実行 (http://localhost:8080/(コンテキストール名)/～)
⓸起動しているサーバーを終了する (bin￥shutdown.bat)
---------------------------------------------------------------

【サーブレット】
●「サーバー」側で働くJavaプログラム

【サーブレットの作り方】
⓵４つの「パケージ」をインストール
 ・import java *;                     //PrintWriter
 ・import javax.servlet. *;           //GenericServletなど
 ・import javax.servlet.http.*;       //HttpServletなど
 ・import javax.servlet.annotation.*; //アノテーション機能
   (注釈の意味。@から始まる記述でPGに補足情報を加えることができる)
   @webservlet("/first") 
   (@webservlet：サーブレットを呼び出すＵＲＬパスを指定するアノテーション(マッピング名))
⓶HttpServletクラスを継承
   public class FirstServlet extende HttpServlet {
⓷アノテーションで「マッピング名を指定」
⓸doGet() / doPost()をオーバーライドして記述する
　・出力の「コンテンツタイプ」を指定
　・「PrintWriter」を取得
　・「」で出力
  (URl直打、リンクをクリック method = "get"などの時に呼び出される)
  (method = "post"を指定したときに呼び出される)
     public void doGet(- req. - res) throws - {
       res.setContentType("text/html;charset = utf-8");
       (setContentType:文字エンコーデング仕様などを指定する)
       PrintWriter out = res.getWriter();
       (PrintWriter getWriter():WEBブラウザに文字列データを送信するための
　　　　　PrintWriterオブジェクトを取得する)
       out.println("<html>");
       out.println("</html>"):
     }
   }
　➡http://localhost:8080/javaweb/first で実行
    (javaweb➡コンテキストルート名、first➡マッピング名)
    ※サーブレットのプログラムを修正したらTomCatを再起動する必要がある
-------------------------------------------------------------------

【サーブレットのフォーム連携】
⓵フォームの入力情報は「name属性の値 = 入力値」の形でリクエストに格納される
 (name属性の値に対して送信される入力値が１つのときと複数のときがある)
⓶「doGet() / doPost()」の引数[req]がもつメソッドから入力値を取得
●void setCharacterEncoding(String en)
 (リクエストデータを読み取る文字コードを指定)
 (エンコーディング➡ルールに基づいて文字情報を０と１の並びに変換すること)
 req.setCharacterEncoding("utf-8");
⓶String getParameter(String name)
  String[] getParmeterValues(String name)
  (パラメータ名nameの入力値を取得するメソッドが２つある)
  (getParameter：Stiringに対して戻り値が１つ受け取るメソッド)
  (getPaarmeterValues：Stringの配列(複数の値)を受け取るメソッド)
  String n = req.getParameter("name");
●指定したname属性の対する入力値が送られてきてない場合、戻り値はnullになる
-------------------------------------------------------------------

【サーブレットのセッション管理】
●複数のリクエスト、レスポンスにまたがって「ユーザーの管理」と「データの管理」をする仕組み
●レスポンスを返すとサーブレットで使った変数の情報はメモリ上から消えてしまう

●「req」からセッションオブジェクトを取得
　➡・セッションオブジェクトの情報はレスポンスを返した後もサーバ上に残り続ける
　　・セッションIDをユーザーごとに生成
　　・セッションIDの管理はWEBサーバーとWEBブラウザがやってくれるのでOK
　　・セッションオブジェクトに格納するデータはObject型として扱う(キャストが必要)
⓵HttpSession getSession(boolean create)
  (初回時に true➡生成 / false➡null)
　・セッションオブジェクトのデータを管理
⓶void setAttribute(String name , Object value)
  (valueをnameという名前で格納)
⓷Object getAttribute(String name)
  (nameという名前のデータを取得)

●void invalidate()メソッド
　セッションオブジェクトに格納されている情報を破棄して、
　セッションを無効にする(ログアウトする)
●ブラウザから一定時間アクセスがない場合、セッションオブジェクトは破棄される
 (Tomcatのセッションタイムアウトはデフォルトでは３０分)
-----------------------------------------------------------------

【JSP (Java Server Pages)】
●HTMLに独自の「タグ」でJavaのコードを埋め込んで動的なWEBページを作る技術
●サーブレットはJavaの中にHTMLが含まれる
　JSPではHTMLの中にJavaが含まれる
●JSPサーブレット
　➡JSPが初めてアクセスされたときに自動変換されて生成されるサーブレット
　・２回目以降のアクセス時はメモリ上に残っているオブジェクトが直接呼び出される
●pageディレクティブタグ
　➡JSPファイル全体の設定
   <% @page contentType = "text/html; charaset = utf-8" %>
　・JSPで日本語を出力するときにはpageディレクトリを書く

【JSPのタグ】
⓵ディレクティブタグ　<%@ ～ %>　★覚える
●JSPをサーブレットに変換するときに利用する情報を指定するタグ。
　directiveは指令、命令という意味。
●サーブレット変換時に必要な設定を記述
　<%@page contentType = "text/html;charset = utf-8 %>
　<%@page import = "java.util.*" %>
●includeディレクティブタグ
　➡JSPファイルに他のHTMLファイルなどを挿入する
　<%@include file = "ファイル名" %>
●taglibディレクティブタグ
　➡JSPファイル内でカスタムタグを利用する
　<%@taglib url = "タグのライブラリのURL"
　　　　　　　　　　　　　　　　prefix = "プレフィックス名" %>                                     
⓶宣言タグ　<%! 宣言 %>
●メンバ変数やメソッドを定義
　<%! String fortune() {～} %>

⓷式宣言タグ　<%= 式 %> 　★覚える
●出力したい式を記述
　<%= i + j %>
●式タグの中身はHTMLとして処理されるため、式の後にはセミコロンを付けない

⓸スクリプトレット　<% Javaのコード %>　★覚える
●Javaのプログラムを記述
　<% for(int i = 0; i <3 : i++) { %>

⓹コメント　<%-- コメント --%>
●JSPのコメントを記述
●JSPのコメントはブラウザに送られないため、ソースを表示しても記述されない

⓺アクションタグ　<タグ名　属性名 = "値"/>
●特定の処理をシンプルに書くためのタグ
　<jsp:useBean id = "counter" scope = "session" class = "Counter" />
----------------------------------------------------------------------

【JSPのフォーム連携】
⓵フォームの入力情報は「name属性の値 = 入力値」の形でリクエストに格納される
⓶「暗黙オブジェクト」のrequestがもつメソッドから入力値を取得
  <% request.setCharcterEncoding("utf-8"); %>
  名前 : <%= request.getParameter("name") %>
 ●暗黙オブジェクト➡JSPサーブレット内で自動で宣言されうるオブジェクトのこと
　・HttpServletRequest request
　・HttpServletResponse rewsponse
　・HttpSession session
　・JspWriter out 
　　などをを自動で宣言してくれる
--------------------------------------------------------------------]

【サーブレットとJSPの連携】
●この２つは単体で使うよりも、「組み合わせ」で使うことが多い
●１つのファイルの中にJavaとHTMLが混ざっていると大規模な開発では問題が生じる
　➡「開発の分担」や「変更対応」が難しい

【サーブレット＋JSPの連携方法】
●リクエストを受ける
　↓
●リクエストのエンコーディング
 (req.setCharcterEncoding()メソッド)
●入力情報の取得
 (req.getParameter()メソッド)
 ↓
●入力チェック・データ編集
 if(age.equals("child")) {
   age = "18才未満";
 } else {
   age = "18才以上";
}
 ↓
●リクエストオブジェクトに格納
 (req.setAttribute("age","age"))
 （引数は２つ指定して変数ageの値を""age"という名前で格納することができる）
　↓
●JSPに転送(フォワード)
 RequestDispatcher rd = req.getRequestDispatcher(URL) 
 rd.forward(req.res)
・(RequestDispatcher req.getRequestDispatcher(String path)
  指定したオブジェクトを取得する)
・(void forward(ServletRequest req, ServletResponse res)
  このRequestDispatcherに指定されたpathに対してリクエストと
　レスポンスを転送する)
　↓
●HTMLの出力
 (リクエストオブジェクトから取得)
 (request.getAttribute("age"))
・リクエストオブジェクトに対してデータを格納・取得するときの名前は一致させる
　↓
●レスポンスを返す
-------------------------------------------------------------------

【Java Beans】
●部品化したクラスを作るための「設計ルール」
●JavaBewnsに従って作られたクラスを「Bean」という

【Java Bearnsの設計ルール】
⓵クラスを「public」指定
⓶引数なしのコンストラクタを定義
⓷「java.io.Serializable」インターフェースを実装
・java.io.Serializable
　➡そのクラスがシリアライズ(直列化)可能であることを示すインターフェース
・直列化
　➡データをビット列で表現すること。ファイル保存やリモート転送ができるようになる
⓸「パッケージ化」
⓹「setter / getter」メソッドを定義
　➡メンバ変数に値を設定するのが「setterメソッド」
　　値を取得するのが「getterメソッド」
●setterメソッドの名前は、set + メンバ変数名
●getterメソッドの名前は、get + メンバ変数名
---------------------------------------------------------------

【アクションタグ】
●特定の「処理」を実行するためのJSPタグ
⓵useBeanタグ：指定したスコープのBeanオブジェクトを「取得する」
　なければ新規生成してスコープに「格納」する
[記述例]
<jsp:useBean id = "参照名"
  scope = "有効範囲" class = "クラス名" />
  (スコープ有効範囲は page.request, session, applicationの４つ)
　・page：JSPページの中で有効
　・request：レスポンスを返すまで有効
　・session：セッションが破棄されるまで有効
　・application：WEBサーバーが稼働している間は有効

⓶setPropertyタグ：「setter」メソッドを呼び出す
<jsp:setPropety name = "参照例" property =  "プロパティ名" value = "値" >
●プロパティ：Bean内にあるsetterメソッドやgetterメソッドを併せ持つメンバ変数のこと

⓷getPropertyタグ：「getter」メソッドを呼び出す
<jsp:getProperty name = "参照名" property = "プロパティ名" />
