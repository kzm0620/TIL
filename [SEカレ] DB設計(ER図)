【データベース設計の手順】
⓵概念データモデルの作成
　・対象業務で使用するデータを洗い出す
　・業務遂行に必要なデータ構造モデル化する
　・システムによる実現可否等は気にしない
　・作成したモデルはＥＲ図として表す
⓶論理データモデルの作成
　・採用するデータベースの種類に合わせて実装可能な形に変換
　・全ての属性を定義する
　・パフォーマンスを考慮し調整する
⓷物理パフォーマンスモデルの作成
　・採用するプロダクトに合わせて調整を行う(Oracleなどの製品を指す)
　・SQL-DDLを作成できる形


【⓵概念データモデルの作成】
●トップダウンアプローチ
　・業務の説明書やドキュメント、インタビューなどからデータモデリングを行う
　・結果的に対象業務全体のモデリングになる
　・あるべき姿を描く
　・アトリビュート(属性)については必要と思われるものを予測して定義する必要がある
　・成果物としてＥＲ図を作成する
●ボトムアップアプローチ
　・現行のシステムの画面や帳票など現場で使用しているものからデータをモデリングを行う
　・結果的に対象業務の一部をモデリングすることになる
　・業務で必要となるすべての属性を洗い出す
　・正規化を行い、ＥＲ図を作成する

【DOAとPOA】
●DOA　(Data Orirnted Approach)
　・データ中心アプローチ
　・業務で必要なデータを洗い出し定義する
　・業務プロセスは定義済のデータを使って設計する
　・データの重複や不整合、異常が起きにくい
　・現在主流の考え方
●POA (Process Oriented Approach)
　・プロセス中心アプローチ
　・業務プロセスを先に設計し、それに必要なデータを後から考える　
　・複数の業務システム間でデータが重複してしまう
　・重複データの整合性を維持するためのシステムが必要になる

【ERD】(Entity Relationship Diagram：ER図)
　・データ項目の集まりであるエンティティとエンティティの関係を表現した図
　・エンティティはテーブルとして実装される
　・エンティティはアトリビュートを持ち、アトリビュートはテーブルの例として実装される
　・エンティティ間の関係はリレーションシップとして表す
　・リレーションシップには業務ルールがある


【ER図の記法⓵】
●IE　(Infometion Engineering)（カラスの足）
リレーショナルが直観的に理解し易いといわれうる

【ER図の記法⓶】
●IDEF1X (Integration Definition)
・米国のNISTによって標準の記化されている記法、様々なデータの構造を記述できる

【ER図の記法⓷】
●エンティティレベル
　➡エンティティにはエンティティ名のみ記述したもの
●キーレベル(主キー)
　➡エンティティにエンティティ名と主キーを記述したもの
●アトリビュートレベル(属性)
　➡エンティティにエンティティ名、ずべてのアトリビュート、主キーを記述したもの

【ER図の構成要素】
●エンティティ
　・データの集まり
　・リレーショナルデータベースにおけるテーブルに該当する
　・アトリビュートを持つ
●リレーションシップ　
　・エンティティの間(エンティテに格納されるインスタンス間)の関係を表す
●アトリビュート(属性)
　・テーブルにおける列に該当する
　・エンティティを説明する機能を持つ

【エンティティ】
●イベント系エンティティ　
　・伝票にあたるエンティティ
　・企業活動の結果、発生するインスタンスを格納する
　・データの発生、更新が多い
　・受注、請求、発注、予約、支払い、等
●リソース系エンティティ
　・台帳にあたるエンティティ、マスター系
　・更新頻度は少ない
　・商品、顧客、従業員、部署、等

●依存エンティティ　➡インスタンスが他のエンティティのインスタンスに依存する(角が丸い)
●非依存エンティティ　➡インスタンスが他のエンティティに依存しない(角が四角)

【リレーションシップ】
●依存リレーションシップ
　エンティティ間が非依存の関係であることを表す
　破線で記述する

●非依存リレーションシップ
　・エンティティ間の関係が依存関係であることを表す
　・実線で記述する


●カーディナリティ
　・インスタンスの多重度(数)
　・Z(ゼロまたは1)、P(1以上)、N(N件=数が決まっている)、N-M(N以上M以下)　等
●オプショナリティ
　・対応するインスタンスが必須じゃ否かを表す
　・必須でない場合は、白抜きのひし形で表す

【アトリビュート(属性)】
●主キー(Primary Key)]
　インスタンスを一意に識別する列
　複数の列によって一意となる場合もある(複合キー)
●外部キー(Foreign Key)
　他のエンティティの主キーとなっている列
　
【スーパータイプ・サブタイプ構造】
●インスタンスの種類を表現する
●確定分類と未確定分類
　全ての分類が記述されている場合を[確定分類]
、他に分類が存在する場合を未確定分類という。

例
[部]にはいくつかの[課]が存在する。
[社員]は必ず１つの[部署]だけに[所属]している。
　➡各カテゴリーごとに分けて考えると分かりやすい


【正規化】
・One fact is one placeを実現する
・更新や挿入(データ追加)、削除の際の異常を防ぐ
・正規化されたモデルを[正規系形]という
・正規化は第一正規化から、第五正規化まで５段階あるが通常は第三正規化まで実施する
　　第一正規化　繰り返し項目の分離
　　第二正規化　複合キーの一部に従属する属性の分離
　　第三正規化　推移的関数従属の分離


【第一正規化の手順】（非正規形→第一正規系）
⓵エンティティ内の繰り返し項目(列)を切り出し、新たなエンティティとする
⓶導出項目(他の列から導きだせる項目)の削除
⓷元エンティティの主キーを新エンティティに追加する
⓸リレーションを設定する

【第二正規化の手順】
⓵エンティティの複合キーを見つける
⓶複合キーの一部に関数従属する(その属性が決まると別の属性も決まる)属性を
　別エンティティとして切り出す
⓷リレーションうぃ設定する

【第三正規化の手順】
⓵主キー以外の属性の中で関数従属関係のある属性を別エンティティとして切り出す
 (この関係を推移的関数従属という)
⓶リレーションを設定する
