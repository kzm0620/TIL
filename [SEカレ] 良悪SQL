【良いSQLとは】
●メンテナンスしやすい➡自分が書いたSQLをメンテナンスするのは他人と考える。
●パフォーマンスがいい➡実行頻度、同時アクセスが増加しても、データが増加しても、
　　　　　　　　　　　　導入当初と同等のレスポンスが維持できる。
●SQLチューニング➡より良い実行計画　、計画通りに実行できているか


【悪いSQLとは】
●必要以上のデータを表示する➡パフォーマンス劣化の原因、セキュリティ上の問題
●索引を使用せず全件検索をする➡パフォーマンス劣化(I/Oの増加、メモリの非効率的利用)


【SQLインジェクション】
●データベースと連動したWEBサービスで、データベースへの問い合わせや操作を行うプログラムに
　パラメータとしてSQL文の断片を与えることにより、データベースを改ざんしたり不正に情報を入手する攻撃。
　また、そのような攻撃を許してしまうプログラムの脆弱性のことを指す。


【データベースへSQLの発行の仕方】
●静的SQL　➡コンパイル時したタイミングでにSQL文として完成している。(表名、列名)
　　　　　　実行時にセキュリティの問題発生しない

●動的SQL　➡SQLを実行したときにSQL文が完成する。（表明や列名は変更できる）
　　　　　　実行時にセキュリティのインジェクション攻撃の問題がある。


【セキュリティの観点から見た良いSQL】
●可能な限り静的SQLで書けるのが望ましい
●適切なデータ型の使用　
　➡数値型の列は数値に変換する(’で囲まない)
●入力値を適切にエスケープ
　➡’や；などの特別な文字を無効化する。’→”　￥→￥￥　など
●バインド機構の使用　(バインド変数)
　➡データ型とSQLの式が確定したものになる
　smpid = 10　　リテラル定数
  smpid = :B1　 バインド変数　（バインド偏変数に対して値を入れて検証していく）


【遅くなる要因のメモリの使い方】
●SQLが共有されない、不要なデータを読み込む



【SQLの共有】
●ハード解析
　⓵新規に実行計画を作成
　⓶共有プールに保存　
●ソフト解析
　・既存の実行計画を再利用
　・SQLカーソルが存在しているのか検索➡あり➡再利用

【SQL解析のしくみ】
●文法的チェック　➡　SQLとしての文法、意味、権限のチェック
●構造解析　➡　検索→あり→再利用(ソフト解析)→
●最適化（実行計画生成）➡⓵新規作成してメモリに保存する(ハード解析)
●コンパイル　⓶保存(ハード解析)
●Ｐコード　　⓶保存(ハード解析)

●同じSQLを記述する　⓵SQLテキストをコード化　⓶同一判定　➡完全一致しているか
　大文字/小文字のルール
　インデント(空白やタブ)、改行の入れ方の統一

　SELECT * FROM SAMPLE
  ↓ (異なるSQL)　個々にハード解析
　select * from sample


【バインド変数を使用する】
●リテラル
　SELECT * FROM sample　　　↑
  WHERE smp_id = 100       異なるSQL(個々にハード解析が行われる)
　SELECT * FROM sample　　　↓
  WHERE smp_id = 200

●バインド変数
　SELECT * FROM sample　　実行時に値が渡される
  WHERE smp_id = :sid (←100,200)

　⓵実行計画決定すると、初回のみ行われる、バインド変数のままで実行計画を立てる
　⓶値をセットして実行➡同じ計画を再利用できる(ソフト解析)


【不要なデータを読み込まない】
　SELECT * FROM orders WHERE cust_id = 20
●全件検索➡すべてをロードしてからフィルタ処理をする(読み込んでも大半の処理が捨てられる)
●索引検索➡テーブルとは別に、列に対するインデックスがある。メモリで再利用

【速くなる要因の索引】
●データ読み込みI/Oの軽減
●データバッファの効率的な利用
　➡対象となるブロック/ページのみロードする

【索引を使用しないSQL】
●WHERE句の列に関数を使う
　➡列とは異なるデータ型を使う(暗黙の型変換)
●索引を使用しない演算子を使う
　➡ＮＯＴ演算子
　　単一列に対するIS NULL
　　(IS NOT NULLは索引が使える検索になる)
　　中間、後方一致のあいまい検索
　➡ＬＩＫＥ演算子　'条件をLIKEでする'
　　A%　　前方一致　前方一致はインデックスでもLIKE演算子が使える
　　%A%  中間一致　 ×
　　%A　　後方一致　×
　　一部はインデックスでもLIKE演算子が使える


【】
Operation
TABLE STATEMENT
  ⓶TSBLE ACCESS BY INDEX ROWID
    ⓵INDEX UNIQUE SCAN
➡Operationは階層になっているが、ぶらさがりの先から実行される
●結合は同じレベルのものが出てくるが、そのときは上から実行される


