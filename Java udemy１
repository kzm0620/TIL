１、基礎固め編　　　　　　　　　　　　　　　　　　プログラミンへの適性がある程度は十分認められる
ーーーーーーーーーーー
２、オブジェクト指向編　　　　　　　　プログラミングへの適性が未経験としては十分認められる
３、データベース基礎編
ーーーーーーーーーーーー
４、データベース活用編　　　　　　プログラミングの適性は十分
５、Webアプリケーション編　　　現場で働き始める最低限の知識がついてる


プログラムとは？
　　　ある仕事をさせるために人間がPCに発する命令のこと。
　　　プログラミングには２つの要素、「アルゴリズム」と「データ」がある。
　　　アルゴリズムとはある目的を達成したり、問題解決するための処理手順のこと。
　　　データとはアルゴリズムの処理対象のこと。
　　　「指定のデータを指定のアルゴリズム通りに処理しなさい」という命令を書くことがプロラミングである。


プログラミングの手順
　　　①ソースコードの作成
　　　②コンパイル（翻訳）
　　　③処理実行
　　　④デバッグ（ソースコード修正　　②と③の途中でも修正はあり）　

①ソースコードは機械に命令したい内容を人間であるプログラマーが理解できる文字列で記載したもの。
②コンパイルはソースコードをPCが理解できる文字列へ翻訳すること。

コンピューターは０と１しか理解できないので、読めるように翻訳する（コンパイル）
して命令すると動く仕組み
バグ（エラー）、バグを取り除くことをデバッグという

Javaの特徴
　　　Javaの思想…「一度書けば、どこでも動く」
　　　Javaで書かれたプログラムは　JVMによってハードウェアやOSの違いを意識することなく
　　　動作させることができ、大規模なシステムでの主に使用されている。
　　　業務システム、スマホアプリ、WEBシステムなど様々な開発環境で使用されている。
　　　プログラミングの基礎を抑えた規則正しくキレイなコードが書ける言語である。

JVM (Java Virtual Machine)
　　　Java仮想マシン。
　　　JVMをインストールしてしまえばOSに依存せずに、どんな環境でもJavaのプログラムを動かすことができる。
　　　Java語を通訳する人がそれぞれインストールされるイメージ。

javaの開発環境の構築
　　　①JDKのダウンロード＆インストール　　（AdoptOpenJDK）
　　　②環境変数の設定
　　　　　JDKはここのフォルダに置いてあるよ、ということをPCに教えるために２つの環境設定する。
　　　　　・　PATH　…　JDK直下のbinファイルを指定（Javaのプログラム本体が格納されている）
　　　　　・　JAVA_HOME　… JDKのインストール先を指定。

　　　JDK（Java開発環境）の中に、JRE（Java実行環境）が入っている。
　　　JREの中に
　　　①　JVM … バイトコードファイルの内容にした処理実行する司令塔。
　　　②　API … Java　SE, Java　EE　などプログラムを実行する上で使用される便利な機能群。

　　　Macユーザーはeclipse（イクリプス）を使用するのがおすすめ
　　　テキストエディタ、Java実行環境、その他開発に役立つ機能、などが入っている

　　　eclipse (Pleiades All in One)　のインストール
　　　①無料で配布されており、所定のWebサイトからインストール可能
　　　②日本語化など便利な機能を付属したものをPleisdesと呼ぶ
　　　③既にJavaが内包されており複雑な環境設定なしですぐに始めることができる

Javaの有償化問題
　　　・Java自体は誰でも無料で利用可能
　　　・これまで無償だったJavaを安全＆手軽に利用するための環境サポート（Oracle JDK）が有償になった。
　　　・Javaを利用するための環境・ソフトウェア・サポートを代わりにするという団体も台頭しており、
　　　　　2020年以降では同じ感覚でJavaを利用することが可能。(Adopt　Open JDK　を使う)

ソースコードの作成
　　　ソースコードはテキストエディタや統合開発環境を用いて作成する
　　　ソースコードファイルは任意の作業フォルダに格納する
　　　今回は　　C:¥　WorkSpeace フォルダに格納

ソースコードの実行
　　　コマンドプロンプトは命令文（コマンド）を入力することでPCに様々な処理を実行させれる。
　　　人間とPCが対話するためのツール
　　　コマンドプロンプト起動後、以下の３ステップでソースコードの実行が可能
　　　①カレントディレクトリの変更　(Windowsの場合)
　　　　　cd WorkSpeace 
　　　②コンパイル
　　　　　javac Javaファイル名.java
　　　③実行
　　　　　java 拡張子なしのファイル名
　　　※Java11以降の　コンパイル　+　実行
　　　　　java ファイル名.java


ソースコードの基本
　　　①中カッコ{}で囲われた領域をブロックという。
　　　　　　　{}の中に{}を記述することも可能で、このことをネストと呼ぶ。
　　　②全てのソースコードは決まりとしてclassという語句から始まるブロックで囲われている。
　　　　　　　このブロックのことをクラスブロックという。
　　　　　　　また、クラスブロック直下でネストされているブロックのことをメソッっどブロックと呼ぶ。
　　　　　　　基本的にPCに実行させたい命令文はメソッドブロック内に記述する。
　　　③命令文の最後には必ずセミコロン;を記述する。（日本語の　。みたいなもの）


変数①
　　　●変数はデータを１つだけ入れておくことのできる名前付きの箱の様なもの。
　　　　　プログラムにおいてデータを取り扱う際は必ず変数が用いられる。
　　　　　変数で扱われるデータのことを「値」という。
　　　●変数で扱うデータの種類のことを「型」という。
　　　　　例えば整数はint型、文字はchar型、小数点はdouble型などが用意されている。
　　　●変数を新しく作ることを変数宣言といい、「型名　変数名;」と記述する。
　　　●変数宣言と同時に値を入れることも可能であり、これを初期化と呼ぶ。
　　　　　型名　変数名　＝　　初期データ;

変数②
　　　●変数を指定することで変数内の値を取得することを「参照」という。
　　　　　参照はコピーに近い挙動をするため、特に値には影響を与えない。
　　　●参照の処理の際、参照先の変数が存在していない場合はエラーとなる。
　　　　　必ず既に変数宣言されているかを確認する。

変数名をつける際の注意点
　　　●半角英数と半角アンダーバーのみ記述すること
　　　●先頭文字に数字は使用できない
　　　●１文字目は必ず小文字
　　　●大文字と小文字は区別されることに注意
　　　●予約後(Javaの中で特別な意味を持つ単語)は使えない
　　　　　予約後の例… break, case, class,public...etc

変数③
　　　●初期化された状態からデータを変更するこおtのできない変数のことを”定数”という。
　　　　　変数宣言の際に「final」を用いることで定数として扱えるようになる。
　　　　　final　型名　定数名　=　初期値（固定値）;
　　　●代入を可能とする通常の変数と一目見て区別できるよう、
　　　　　”定数名は半角英数の大文字”で記述することが望ましい。
　　　　　全て大文字で書くため大文字区切り（キャメルケース）は使用できない。
　　　　　そのため、定数名は必ずアンダーバー区切り（スネークケース）で記述する。
  　例　… listPrice ▶︎ 　LIST_PRICE

変数④
　　　●型は　”整数”、”小数点数”、”文字”、”論理値”の４種類に大別される。
　　　●同じ整数を扱う型でも４種類、小数点数を扱う型でも２種類　用意されている。
　　　　　これらの違いはデータ容量（箱の大きさ）にあり、扱う値の大きさに応じて、
　　　　　最適な型を選ぶことでメモリを節約することができる。
　　　　　ただし、昨今ではメモリの関する技術が上がっているのでデータの大きさに関わらず
　　　　　”整数ならint型”、”小数点数名らdouble型”を使用するのが一般的。
　　　●文字を扱う型は２種類あり、
   ”cher　は大文字/小文字を区別せず１文字のみを扱える型”
　　　　　　”String　は０文字以上の文字列を使うことのできる型”
　　　●”boolean　は”論理値を扱える型で、格納できるのは、
　　　　　true（正しい）　/　false（正しくない）のどちらかのみ。

　　　整数　… 　　　　　　byte　　　　　　　　およそ　±128　（メモリの容量　１バイト）
　　　　　　　　　　　　　　　　　　　　　short　　　　　　およそ　±32,000　（メモリの容量　２バイト）
　　　　　　　　　　　　　　　　　　　　　int　　　　　　　　　　およそ　±21億　（メモリの容量　４バイト）
　　　　　　　　　　　　　　　　　　　　　long　　　　　　　　およそ　±900京　（メモリの容量　８バイト）
　　　小数点数　… float　　　　　　小数　（doubleより厳密さに欠ける）
　　　　　　　　　　　　　　　　　　　　　double　　　　小数
　　　文字　…　　　　　　　　cher　　　　　　 １文字　（Unicode文字）
　　　　　　　　　　　　　　　　　　　　　String　　　　文字列
　　　論理値　…　　　　　boolean　　true　か　false

変数⑤ リテラル
　　　●プログラム中に記述された具体的な値のことをリテラルと呼ぶ。
　　　●整数リテラルは暗黙的に”int型”として扱われる。
　　　●小数点リテラルは暗黙的に”double型”として扱われる。
　　　●文字リテラルはシングルクォーテーション囲いだと”char型”、
　　　　　ダブルクォーテーション囲いだと”Stirng型”とりて扱われる。
　　　●数値リテラルはただそれだけではどんな意味を持った数値かわからず、
　　　　　ソースコードが難読化してしまうため、極力変数として名前づけして管理するのが望ましい。
　　　　　数値リテラルは”マジックナンバー（意味は分からないが動く魔法の数字）”とも呼ばれ、
　　　　　プログラミングのアンチパターンとなっている。

リテラルと対応する型
　　　（データ種類）　　　　　　　（書式）
  int          5000000 
  long         3500000000L (値の末尾に　L　をつける)
  double       6.05
  float        1,35F (値の末尾に　F をつける)
  char         '日'　（シングルクォーテーションで囲う）
  boolean      treu or false
  String       "こんにちは"　（ダブルクォーテーションで囲う）

変数⑥ エスケープシーケンス
　　　●タブや改行といった文字としえ表現できない情報を表現したいときや、
　　　　　Javaの仕様においてあらかじめ特殊な意味づけのされている記号（クォーテーションなど）
　　　　　を文字として表現して時に、
　　　　　文字の先頭に”　￥　”（環境によっては　\　と表記されることもある）を付ける。
　　　　　こうした特殊な記述の仕方を”エスケープシーケンス”と呼び、”￥”を使用して
　　　　　表現された特殊文字を”エスケープ文字”と呼ぶ。
　　　　　（Macの場合はオプション　＋　¥マークキーで　＼　の入力ができる）

   ("　ヽ　#　"　3　"　#　ノ”)　この顔文字のままだとエラーになる
　　　　　　("　ヽ　# ¥"　3　¥"　#　ノ”)　¥を付けることで出力することができる

エスケープ文字
　　　（エスケープ文字）　　　　（意味）
      ¥b　　　　　　　　　　　　　　　　バックスペース
      ¥f　　　　　　　　　　　　　　　　改ページ
      ¥n　　　　　　　　　　　　　　　　改行
      ¥r　　　　　　　　　　　　　　　　リターン
      ¥t　　　　　　　　　　　　　　　　タブ
      ¥'　　　　　　　　　　　　　　　　'
      ¥"        "
      ¥¥        ¥
　　　行動を文字として表現することができる

