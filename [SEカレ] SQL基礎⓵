【SQL】
リレーショナルデータベースを扱うための言語。
RDBNSの標準の言語として広く普及している。

●DDL (Data DEfinition Language) ➡　　CREATE, ALTER, DROP
●DCL (Data Control Language)　➡　　　GRANT,  REVOKE
●DML (Data Manipulation Language)  ➡ SELECT, INSERT, UPDATE, DELETE
●トランザクション制御   COMMIT, ROOLBACK

【テーブル作成】
●テーブル名、列名、列のデータ型を指定する
●テーブル名、列名には命名規則がある
　予約語（SQLのキーワード）使用できない
●定義できる列の数には制限がある

CREATE TABLE　テーブル名
(列名１　データ型（有効桁数）
,列名2　データ型（有効桁数）
..........
,列名3　データ型（有効桁数）
)

●DESC （デスクライブ）
　テーブルを作成した後、そのような列で構成されているか確認できるコマンド

【制約】
●テーブルに正しいデータを維持するためのルール
●単一または列のグループに対して定義可能
・NOT NULL　　　　必須、NULLを認めない
・UNIQUE　　　　　位置　重複値を認めない
・PRIMARY KEY　　主キー　必須であり、一意でなければばらない
・FOREIGN KEY　　外部キー/参照整合性　参照先に存在する値でなければならない
・CHECK          チェック/検査　指定した条件を満たさなければならない


【NOT NULL 制約】
　・必須、NULLを認めない
　・列制約構文のみで定義可能
　　（一つの列で制約宣言ができる場合に使うもの）
例 CREATE TABLE sample
   (sample INT
   ,sample  VARCHAR(20)
   CONSTRAINS sample_name_nn NOT NULL　(CONSTRAINSで後から管理しやすいように名前をつけておく)
   )

【UNIQUE 制約】
　・一意重複を許さない
　・NULLは複数行あっても良い

例：列制約構文
   CREATE TABLE sample
   (.....
   ,email,VARCHARA(80)
   CONSTRAINS sample_email_u UNIQUE
   ,.....
   ,depto INT　
   )
-----------------------------------------------
例：表制約構文
   CREATE TABLE sample
   (....
   ,email VARCHAR(80)
   ,....
   ,dept INT
   ,CONSTRAINS sample_email_u UNIQUE(email)（どの列に対して制約をつけたいのか）
   )
   全ての列の定義が終わったからどの列にUNIQUE制約をつけるのかという意味


●１つの列に複数の制約を定義することが可能

例：列制約構文
　 CREATE TABLE smp
   (.....
   ,email,VARCHAR(80)
   ,CONSTRAINS sample_email_u UNIQUE
   ,CONSTRAINS sample_email_nn NOT NULL
   ,.....
   ,)
--------------------------------------------------
●実は制約の名前は省略することが可能
例：列制約構文
   CREATE TABLE smp
   ,.....
   ,email,VARCHAR(80) UNIQUE NOT NULL
   ,.....
   )
   (省略する場合はCONSTRAINは無くても大丈夫)


【PRIMARY KEY制約】
　●主キー（表内のレコードを識別する）
　●１つのテーブルにに１つしか定義できない

例：列制約構文
   CREATE TABLE smp
   (Smpno INT
   CONSTRAINS smp_pk PRIMARY KEY
   ,.....
   ,smpno INT
   )
---------------------------------------------
例：表制約構文
   CREATE TABLE smp
   (smpno INT
   ,.....
   ,smpno INT
   ,CONSTRAINS smp_pk PRIMARY KEY(smpno)
   )


【FOREIGN KEY 制約】
●外部キー/参照整合性（入力値は参照先に存在する値でなければならない

例：列制約
CREATE TABLE smp
(.....
,smpno INT CONSTRAINS smp_smpno_fk
REFERENCE smp(smpno)
)
------------------------------------------------------
例：表制約
CREATE TABLE smp
(.....
,smpno INT
,CONSTRAINS smp_smpno_fk FOREIGN KEY(smpno)
REFERENCES(smpno)
)


【CHECk 制約】
●チェック/検査（指定した条件を満たす）

例：列制約
CREATE TABLE smp
(.....
,sal INT CONSTRAINTS smp_sal_ck
CHECK（sal >= 80000）
,......
,smpno INT
)
----------------------------------
例：表制約
CREATE TABLE smp
(.....
,sal INT
,......
,smpno INT
,CONSTRAINts smp_sal_ck CHECK(sal >=80000)
)


【索引の作成】
●索引/インデックス
　・検索の速度向上（定義すると値が小さい順に格納され、場所も保管されている）
　・重複チェック

●UNIQUE、PRIMARY KEY制約を定義した列には、自動で索引が作成される。
●索引は手動で作成もできる
●列のグループを１つの索引として定義することもできる
●構文
CREATE INDEX 索引名
ON 表名(列名[列名,....])


【テーブル構造の変更】
●例：列の追加
　ALTER TABLE smp ADD
  (gender CHAR(1)
  CHECK(gender in) 'M','F'))　 (性別のチェック)

●例：有効桁数の変更
  ALTER TABLE smp  MODIFY
  (smpname VARCHAR(60))　　（数値の変更）

●例：列の削除
  ALTER TABLE smp DROP
  COLUMN salary　　　（slaryの列を削除）


【テーブルの削除】
●表を削除すると以下も削除される
　・表の定義、制約　
　・格納されていたデータ
　・索引
●構文の
　　DROP TABLE テーブル名
●索引だけの削除
　・UNIQUE, PRIMARY KEY制約によって作成された索引は削除できない。
　　（制約を削除すると一緒に削除される）
●定義されている表やデータには影響はない
●構文
　　DROP INDEX 索引名

【まとめ】
●テーブルの作成は　CREATE　TABLE
●テーブル名やカラム名は、各RDBMSの命名規則に従う
●テーブルに保存する値に適したデータ型を定義する
●データ型の表記は、各RDBMSに従う
●テーブル作成後、列の追加、削除が可能
●制約を大義するとプログラムなしで正しい値を維持することが可能になる
●UNIQUE, PRIMARY KEY制約を定義すると索引が作成される
●テーブルの削除は　DROP　TABLE


