・main は必ず最初に呼び出されるルールがある。
・ln はラインという一行表示して改行せよという意味
・表示➡オプション➡表示➡半角空白、全角空白にチェックをお入れておく
・Javaは膨大なクラスがあるため、あえて長い名前をつけることも多い
　その長い名前の前につける苗字のようなものをパッケージ名とよぶ。
　長いクラス名を書くのは大変なのでインポートで輸入するイメージ。
　インポートすればそれ以降は短い名前だけの部分で使うことができる。
・System.out.printだけの場合は改行しない。

●キャスト（型変換）
int型、double型、char型でキャストを行うプログラム

●javaは実行時のエラー処理が構文で用意されている。エクセプションと呼ぶ。

【繰り返し構文】
●while 先にチェックして繰り返し処理をするので「前判定」
●do-while は処理をしてから繰り返すかを判断する「後判定」
●for 「～の期間を繰り返す」
Javaは配列を作るとき、メモリー上に配列のための領域を新しく確保するという表現がある。(その言語の世界感)
●配列の要素数は、配列名.length で得られる。

【コマンドライン引数】
●String[]args　はコマンドライン引数を受け取る仕掛けのもの。
　➡コマンドラインはコマンドプロンプトで入力する行のこと。
●java 実行するクラス名に続けて、スペースで区切って任意のデータを指定することができる
　➡このことをコマンドラインの引数と呼ぶ。
●mianのString[] は何を入れても文字列扱いとなる。文字列の配列という意味。
　argsアルグズ(アーギュメンツ)

【多重ループ】
●繰り返しの中に繰り返しがある。
●縦の何個目、横の何個目、などの２次元配列で主に使用される。

【拡張for文】
●1次元配列および２次元配列の繰り返しの変数を用意するのが面倒、、その要素を取り出すプログラム。
●端から端まで取り出す場合は拡張for文が楽、特定の範囲を取り出す場合は通常のfor文と使い分ける。

【メソッドの作成】
●プログラムはいくつかの構成に分けて作る、このことをモジュールと呼ぶ。プログラムの大きな部品のイメージ
●処理のまとまりをいくつかのメソッドに分けて、それらが連携して動作するほうが見通しが良い。

●メソッドの作り方
➡public(プログラムの他の部分から利用できるという意味)から書き始める。
　static(静的)このメソッドは最初からメモリ上に存在しますよという意味。
　ststicの後にメソッドの処理結果として返される値を戻り値のデータ型。
　（戻り値がない場合は、無いという意味のvoidを指定する）
　メソッド名は自分で決めれる
●reutrn は⓵戻り値を返す　⓶処理の流れをプログラムに返す

【例外処理】
●javaはあらかじめエラーを表すクラスが用意されている。
　そのクラスの名前でどんなエラーか区別できるようになっている。
　配列の範囲を超えた例外は、
　Array Index Out Of Bounds Exception　というクラスで知らせる。
　それをtryとcathという構文で処理される。
　tryのブロックでエラーが発生する可能性がるブロックを囲う
●引数は２つ指定されたのに、整数に変換できないと、
 Number Format Exception　で知らされる。
●整数が両方指定されたが、argsの数値が０の場合はゼロ除算になってしまう（無限大になってしまう）
 Arithmetic Exception で知らされる
●それ以外の例外が発生した場合は、すべての例外という意味の
 Exception で知らされる。

●例外の表示をExceptionだけにもできる
 (Exception e)などExceptionの後の文字で判断できる。eオブジェクト
　e.getClass().getName()を記述すると何の例外か分かるようになる。


【オブジェクト指向】

【クラスの定義とインスタンスの生成】　！！重要！！
●クラスはオブジェクトを定義するもの、とイメージする。
●モジュールを使うのがプロセス指向、キーボード入力はオブジェクト指向
　混在してるのがJavaの特徴のひとつ。
　メソッドがモジュールになっている場合と、クラス全体がオブジェクト指向のモジュールになっている場合がある。

クラスの定義は３点セットで１つのモジュールになる
⓵フィールド（モノや生き物の中身のデータ）
⓶メソッド　（自分が内部に所持しているデータで処理を行うメソッドを書く）
⓷コンストラクタ（フィールドに初期値を設定するための初期化メソッド）
あらかじめ用意されているメソッドを使うことのが多い。
↓
クラスを一式ロードする必要がある。➡　new クラス名(コンストラクタに渡す初期値データを指定)
これをクラスのインスタンスまたはオブジェクト呼ぶ。
そのオブジェクトの持っているメソッドを呼び出す。show();　で指定。


【メソッドのオーバーロード】
●プロセス指向でもオブジェクト指向でも、同じ名前のメソッドをクラスに複数定義できること。
●Javaはメソッド名と引数まで区別して判断している。

【クラスメンバとインスタンスメンバ】
●メソッドでもフィールドでもつけられるが、staticをつけるとメモリ上にじっとしている。
●クラス名.メソッド名、クラス名.フィールド名とすることをクラスメンバという。
●staticがついてないものはメモリをロードしてから使い、その時につけられた
インスタンス名.フィールド名、インスタンス名.メソッド名とすることをインスタンスメンバという。

【クラスの継承とメソッドのオーバーライド】
●継承は便利な機能。すでにあるクラスに機能つけ足して新たなクラスをつくること。
　後から書いたことが優先される。これをメソッドのオーバーライドという。
　class 〇〇 「extends」 〇〇　でjavaでは拡張を意味する。
　元々あるコンストラクタを呼ぶ方法は「super」構文を使う。
　継承元のクラスをスーパークラスという。　
　
【カプセル化とアクセサメソッド】
●フィールドは原則、プライベートで設定しているが、
　フィールドの値を外部から読み書きした場合もある。
　(フィールドをpublicにしても良いが流儀としてプライベートにしておく)　　
　今オブジェクトのフィールドの値を読みだしてデータベースに保存したい、
　データベースから呼び出した値で設定し直したい場合など。
　↓
　プライベートのフィールドを読み書きするメソッドを使うには、
　publicなメソッドを用意する。
　setフィールド名, getフィールド名というメソッドを作る。
　引数で指定された値をフィールドに書き込む。
　これらを読み書きするメソッドをアクセッサーという。
　不適切な値を入れられないようにするメリットもある。


【抽象クラスと多態性】　！重要！
●オブジェクト指向のゴールに指定されるほど重要。
●色々なクラスをまとめたスーパークラスはメソッドの構文は定義できても、処理内容が書けない場合がある。
　(動物の鳴き声など抽象的なもの)
　↓　
　メソッドの前に抽象的の意味のabstractを付ければ、メソッドの処理内容を書かなくても、
　セミコロン：最後につけるだけでよい。これを抽象メソッドという。

　抽象メソッドを持つクラスは、クラス自体が抽象的ということなので
　「abstract」 class クラス名 { とする。
　コンストラクタでは名前だけ指定する。
　↓
　抽象クラスを継承して初めて処理を書ける。抽象クラスの処理を書くことを「実装」という。

★スーパークラスがそれを継承した複数のサブクラスをまとめて扱うデータ型になる。


【インターフェースと多態性】
●インターフェースとは何かと何かの境界面という意味。
　javaではクラスとの約束事と考えるほうがよい。その約束事をメソッドで決める。
　interface　名前　で定義できる。(abstractは不要)
　約束事を守る、impliments(実装する)　class クラス名　impliments　{
　インターフェースは全てが抽象的、抽象クラスは一部が抽象的。

【集約】
●他のクラスのオブジェクトをフィールドに持つこと。
　クラスをまるごと使う方法は２つある
　⓵継承　すでにあるクラスに付け足し
　⓶集約　他のクラスを内部に持つ　
●System.out.println の out は集約になる。


【オブジェクトの比較とキャスト】
●javaのクラスは何も継承しなくてもあらかじめ用意されている「Objectクラス」を
　継承するという決まり事になっている。(Oが大文字)
　そのクラスには全てのクラスが持つメソッドが定義されている。
　その中の一つにオブジェクトが等しいか確認する 「equalsメソッド」がある。
　このメソッドをオーバーライドして使用する。


【例外クラスの作成と例外のスロー】
●例外を処理することをキャッチ、例外を自分で作ることをスローという

【ジェネリクスとボクシング】
●型を使うときに指定できるもの。汎用的に使うことができる。

【列挙型】（enum イーナム)
●東西南北を表す列挙型(direction)の機能を確認するプログラム。

【ガベージコレクション】　ゴミ
●newしたものが不要になったら消したいとき使う。
自動的にメモリから削除してくれる。
