● オブジェクト指向を学ぶ意味
　　　　　オブジェクト指向は「人間が楽をする」ための工夫である。
　　　　　プログラムが大規模になると、人間の頭では全てを把握しきれなくなる。
　　　　　楽にプログラムを組立て、修正できるようにオブジェクト指向が存在する。　
　　　　　アプリケーションを作り上げるための必要不可欠な知識である。

● オブジェクト指向とは何か
　　　　　オブジェクトは「もの」、指向は「〜を中心に」といった　オブジェクトを中心といた意味になる。
　　　　　オブジェクト指向は、プログラムの世界に現実世界の「もの」に似たオブジェクトを作りだし、
　　　　　そのオブジェクトを中心にプログラムを組み立てる。

● オブジェクト指向に触れてみる
　　　　　例として自己紹介プログラムで考えてみる。
　　　　　もし二人が自己紹介をするプログラムなら、あたかも人間が二人いるかのように
　　　　　「人間オブジェクトを２つ作り、そのオブジェクト達に自己紹介させるイメージ。

  Parson person1 = new Person("鈴木", 24); .....一人目のオブジェクト
  person1.hello(); ......一人目が自己紹介をする
  Person person2 = new Person("田中", 20); .....二人目のオブジェクト
  person2.hello(); ......二人目が自己紹介をする

● オブジェクトの姿
　　　　　現実世界の例えば人間であれば「名前」や「年齢」といった情報を持っている。
　　　　　プログラムの中のオブジェクトは、現実世界の「もの」を真似たもので、
　　　　　現実世界と同じように「情報」と「振る舞い」を持っている。

● クラスとインスタンス
　　　　　オブジェクト指向で大切なのはクラスとインスタンスである。
　　　　　インスタンスというのはオブジェクトの別名。
　　　　　クラスはインスタンスの設計図にあたる。
　　　　　インスタンス（オブジェクト）は、クラスという設計図をもとに作られる。

● インスタンスに情報と振る舞い
　　　　　インスタンスの情報と振る舞いは、設計図であるクラスに定義する。
　　　　　例えば、「名前」　「年齢」　という情報と、「あいさつ」　「歩く」　という振る舞いを持つ人間の
　　　　インスタンスを作るのであれば、Personというクラスにそれらの情報と振る舞いを定義する。

● クラスとインスタンスのまとめ
　　　　　クラスの最大の特徴は、インスタンスの設計図になること。
　　　　　インスタンスは「実態」という意味。
　　　　　オブジェクトの別名がインスタンスなのは、設計図から実際に生み出された実態である為。

  Personクラス　　情報　・名前　　・年齢
　　　　　　　　　　　　　　　　　　　　　　　　　　　振る舞い　・挨拶をする
　　　　⬇︎
  鈴木くん　２４歳　　　　こんにちは！

● クラスの定義
　　　　　　class クラス名 {
      //
   }

● インスタンスの生成
　　　　　クラスからインスタンスを生成するには「new クラス名()」　とする。

  [Main.java]
   class Main {
     public static void main(String[] args) {
       new Person(); .........Personクラスのインスタンスの生成
     }
   }
----------------------------------------------------------
  [Person.java]
    class Person {
      //
    }
●　インスタンスを変数に代入する
　　　　　インスタンスは変数に代入して用いる。
　　　　　これまでは変数名の前にデータ型を指定してきたが、
　　　　　変数にインスタンスを代入するには　「クラス型　変数名　= new クラス名()」　とする。
　　　　　インスタンスの代入ではクラス型を指定する。クラス名がそのままクラス型になる。

  class Main {
    public static void main(String[] args) {
     Person person = new Person();
     クラス型　　　変数名
     }
  }

●　インスタンスを複数生成する
　　　　　　インスタンスは、１つのクラスから何個でも生成することができる。
　　　　　　設計図をもとに同じようなオブジェクトを大量に作ることができる。
　　　　　　作られたインスタンスは全て同じ種類の情報（中の値はインスタンスごとに変わり得る）と
　　　　　　振る舞いを持つ。

   class Main {
     public static void main(Stirung[] args) {
       Person person1 = new Person();
       Person person2 = new Person();
       Person person3 = new Person();
     }
    }

●　インスタンスの情報と振る舞い
　　　　　インスタンスの情報にあたるものを　「インスタンスフィールド」、
　　　　　振る舞いにあたるものを　「インスタンスメソッド」　と呼ぶ。

●　インスタンスメソッドを定義する
　　　　　インスタンスの振る舞いは、プログラム上ではメソッドで表現する。
　　　　　このインスタンスのメソッドのことを　「インスタンスメソッド」　と呼ぶ。
　　　　　インスタンスメソッドは　「public 戻り値の型 メソッド名（）」　と定義する。
　　　　　過去に学んだメソッドと違い　static　がないが後ほど振り返る。

  class Parson {
    public void hello() {
            ⬇︎    ⬇︎
　　　　　　　　　　　　　　　　　戻り値の値　　　メソッド名
      System.out.println("こんにちは"）;
    }
  }

●　インスタンスメソッドの呼び出し
　　　　　インんスタンスメソッドは、クラスに定義しても実際は各インスタンスに属するイメージを持っておく。
　　　　　それゆえ、インスタンスメソッドはインスタンス（を代入した変数）に対して呼び出す。
　　　　　過去で学んだメソッド同様ドットを使って呼び出すが、「インスタンス名.メソッド名（）」　とする。

   [Main.java]
   Person person1 = new Person();
   Person person2 = new Person();
   person1.hello(); ......インスタンスに対して呼び出す
   person2.hello(); ......　　//

●　インスタンスフィールドの定義
　　　　　インスタンスフィールドとはインスタンスが持つ情報のこと。
　　　　　インスタンスフィールドは、情報を格納しておく　「変数」　にすぎない。
　　　　　その変数はクラスの一番上に定義する。
　　　　　注意点として、　「public データ型　変数名」　というように変数定義の前にpublicをつける。
　　　　　メソッドやフィールドのpublicの意味はまた後ほど学習する。

   class Person {
     public String name; ........名前を入れる変数を定義
   }

●　インスタンスのフィールド
　　　　　　　インスタンスフィールドも各インスタンスに属する。
　　　　　　　インスタンスを生成するときに、各インスタンスにフィールドがコピーされるイメージを持っておく。

●　インスタンスフィールドへのアクセス
　　　　　インスタンスフィールドには、「インスタンス名.フィールド名」　というように、
　　　　　インスタンスに対してドットを用いてアクセスする。
　　　　　ドットを用いること以外は変数とあまり変わらない。
　　　　　下図のように、値の取得とセット（代入）が可能である。

   Person person1 = new Person(); 
   person1.name = "Suzuki";  ........nameに値をセット
   System.out.println(person1.name); .......nameの値を取得
   //結果　：　Suzuki

●　クラスの中でインスタンスを扱う
　　　　　インスタンスフィールドnameの値を用いて、helloメソッドで
　　　　　「こんにちは、私は〇〇です」　と自分の名前とともに出力するようにしてみる。

   [Person.java]
   class Peson {
     public String name;
     public void hello() {
       //こんにちは、私は〇〇です
     }
   }

●　this
　　　　　メソッド内でインスタンスフィールドにアクセスするためには　「this」　という特殊な変数を用いる。
　　　　　thisはクラス内のメソッドの定義の中でのみ使用できる。
　　　　　thisはメソッドが呼ばれた時に、そのメソッドを呼び出しているインスタンスに置き換えられる。

   Pesrson person = new Person();
   person.name = "Suzuki";
   person.hello();
　　　　　　　　　　※
   // 結果　：　こんにちは、私はSuzuki　です
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
   class Person {
     public String name;
     public void hello() {
       System.out.println(”こんにちは”、私は + this.name + "です");
                                           ※(Suzuki)
     }
   }

●　インスタンスフォールドへの値のセット
　　　　　ここまではインスタンスを生成してから、nameフィールドへの値をセットしてきたが、
　　　　　これはインスタンスフィールドが増えると面倒になる。
　　　　　インスタンスフィールドへの値のセットが楽になる方法がある。

  Pesrson person = new Person();
  person.name = "Suzuki";  ........毎回セットするのが面倒
  Pesrson person = new Person();
  person.name = "Kato";    ........毎回セットするのが面倒

●　コンストラクタ
　　　　　　クラスには、コンストラクタというものがある。
　　　　　　コンストラクタとは、newを使ってインスタンスを生成した時に、
　　　　　　「自動で呼び出される」　特別なメソッドです。

　　　　　　インスタンス生成（new） ▶︎　直後に　▶︎ 　コンストラクタ実行

●　コンストラクタの定義
　　　　　コンストラクタは特別なメソッドのため、定義方法が決まっている。
　　　　　①コンストラクタ名はクラス名と同じにする。
　　　　　②戻り値を書いてはいけない（voidも書かない）
　　　　　この二つの決まりを守れば、コンストラクタの完成。

   class クラス名 {
     クラス名() {                       ........
       //インスタンスの生成時に行いたい処理   .......コンストラクタ
     }                                ........
   }

● コンストラクタの具体例
　　　　　以下の例は、newでインスタンスを生成したときにコンストラクタが呼び出される例。
　　　　　小俺だけではまだインスタンスフィールドの値を楽にセットする、にはなっていないので注意。

  [Main.java]
  Person person = new Person();
            ⬇︎
  [Person.java]
  class Person {
    pubilc String name;
      Person() {
        System.out.println("インスタンスが生成されました");
      }
            ⬇︎
　　　　　インスタンスが生成された直後に実行される

●　フィールドに値をセットする
　　　　　コンストラクタを用いて、インスタンスフィールドへの値のセットの面倒さを解決していく。
　　　　　newでインスタンスを生成した後に自動で実行されるコンストラクタの中で、
　　　　　各フィールドで値をセットする様にする。

   [main.java]
   Person person = new Person();
   person.name = "Suzuki";  ........コンストラクト内でセットしたい
　　　　　ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
   [Person.java]
   class Person {
     public String name;
     Person() {
       //ここにコンストラクトをセットする
     }
   }

●　コンストラクト内に情報を渡す
　　　　　newでインスタンスを作る際、「new クラス名（）」　の中には引数を渡すことができる。
　　　　　そしてその引数は直後に呼び出されるコンストラクタに受け渡される。
　　　　　こうしてコンストラクタに任意の情報を渡すことができる様になる。

●　コンストラクタでフィールドをセットする
　　　　　インスタンスを生成する際に、インスタンスにフィールドをセットしたい値を数に渡し、
　　　　　　コンストラクトでセットするようにしてあげる。
　　　　　コンストラクトでも、thisを用いてインスタンスを利用することができる。

   [main.java]
   Person person = new Person("Suzuki");
                                　　①
   System.out.println(person.name);
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
   [Person.java]
   class Person {
     public String name;
     Person(String name) {
                    ②
       this.name = name;
       　　　　　　　　　　　　④      ③
     }
    ①〜④の流れでセットする

●　インスタンスフィールドを定義する
　　　　　まずはインスタンスフィールドを定義する。
　　　　　実際の開発でも、インスタンスにどんな情報を持たせるかをまず考えて、情報を書き出す。
　　　　　プログラムの中では必要最低限の情報を持たせるようにする。

   Personオブジェクト　　の中身
　　　　　　　　　　インスタンスフィールド　　　▶︎  firstname,lastname,age,hegth,weigth...etc

●　コンストラクトを作る
　　　　　インスタンス生成時にインスタンスフィールドの値をセットできるように、コンストラクトを作る。

   [Person.java]
     class Person {
       public String firstName;
       public String lastName;
         …
       Person(String firstName,  String lastName, ....) {
         this.firstName = firstName;
         this.lastName = lastName;
         …
       }
     }

●インスタンスメソッドを定義する、書き換える
　　　　　過去では引数で値を渡していたが、この必要はもうない。
　　　　　インスタンスメソッドは、thisを使って自分のインスタンスフィールド（情報）を取得できるから。

  [今まで]
  class Person {
    …
    pbulic static String fullName(String fistName....) {
      return firstName + .......;
    }
  }
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
  [新しい]
  class Person {
    public String firstName;
      …
    public String fullName() {
      return this.firstName + ........;
    }
  }
●　他のインスタンスを呼び出す
　　　　　インスタンスが自分の情報をコンソールに出力するprintDataという
　　　　　インスタンスメソッドを定義する。
　　　　　printDataメソッドは、fullNameメソッドやbmiメソッドちいった他のメソッドを呼び出す。
　　　　　インスタンスを指すthisを使えば、ほかのインスタンスメソッドを呼び出すことも可能。

  [今までのコード]
   public static void printData(.....,double height, double weight) {
         …
      double bmi = bmi(height,weight);
         …
   }
   public stsatic void bmi(double height, double weight) {
      return weight / height / height;
   }
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
 
  [新しいコード]
   public void printData() {
          …
     double bmi = this.bmi();
          …
   }
   public double bmi() {
     return this.weight / this.height / this.height;
   }

●　クラスフィールドとその定義
　　　　　クラスに属するクラスフィールドというものもある。
　　　　　クラスフィールドには、static　をつけて　「public static データ型　変数名」　と定義する。

   class Person {
     public static データ型　変数名； .........クラスフィールドにはstaticをつける
   }

●　クラスフィールドの具体例
　　　　　何人分のインんスタンスを生成したか数えるために、countというフィールドで
　　　　　インスタンスの生成回数を保存するするようにしてみる。
　　　　　countは個々のインスタンスが持つものではなく、Personクラスが持っていれば良いので
　　　　　クラスフィールドにしてあげる。

   class Person {
     public static int count; ..........クラスフィールド
     public String firstName; ..........インスタンスフィールド
     public String lastName;  ..........インスタンスフォールド
        …
   }

●　フィールドに初期値を設定する
　　　　　フィールドには、定義時に初期値を設定しておくことができる。
　　　　countはインスタンスの生成回数なので、下図のように定義時に０を代入しておく。

   class Person {
     public static int count = 0; ........初期値を入れておく
         …
　　　　　　}

●　クラスフィールドのアクセス
　　　　　クラスフィールドには　「クラス名.クラスフィールド名」　でアクセスすることができる。
　　　　　下図ではコンストラクタで、countに１を足している。
　　　　　この様にすればインスタンスの生成に度にcountに１が追加されていくので
　　　　　[Main.java]でcountの値がへんかしているのがわかる。

  [Main.java]
   class Main {
     public static void main(String[] args) {
       System.out.println("合計" + Person.count + "人です");
       Person person1 = new Person(.....);
       System.out.println("合計" + Person.count + "人です");
     }
   }
　　　コンソール　▶︎　合計０人です　　　合計１人です
　　　ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
   [Person.java]
    class Person {
      public static int count = 0;
         …
      Person (String firstName,.......) {
        Person.count ++;
      }
    }

●　クラスに属するメソッド
　　　　　クラスフィールドがクラスに属するフィールドであるように、クラスに属するメソッドもある。
　　　　　これをクラスメソッドと呼ぶ。
　　　　　クラスメソッドの定義は、「public static 戻り値の型　メソッド名()」　とする。

   [Person.java]
   class Person {
     public static 戻り値の値　メソッド名() {  .......クラスメソッドにはstaticを付ける
       //処理
     }
   }

●　クラスメソッドの呼び出し
　　　　　これまで学習してたメソッドにはstaticがついていたが、実はこれらは全てクラスメソッドである。
　　　　　クラスメソッドは　「クラス名.メソッド名」　と呼び出す。
　　　　　これはクラスメソッドがクラスに属しているため。
　　　　　クラスメソッドはインスタンスを生成しない状態でも呼び出すことができる。
