【データ型】
●変数の宣言で必要
●JSでは厳密な型宣言が不要
●変数の定義方法➡「var」と「$」
●変数名は大文字と小文字を区別する➡itemとItemは別物

【変数宣言の例】
var a;
var b = 1:
var c = "x"
var D = 'y'
var e = true:
(Javaのようにintなど記述する必要がない)

➡「型のあいあまいさ」
JSではかた変換が自動で行われるこが多い
　・結果か分かりにくくなる
　・業務では「分かりやすく書く」必要がある

  var a = '37':
  var b = a + 7:   //b= '377'
  var c = a - 7:   //c = 30 
  (文字列と数値の判別がややこしくなる)

●数値を文字に変換
  var a = String(1);  (明確にこれは文字列であることを示す)
  var b = 1 + '':
●文字を数値に変換
  var c = Number('1'):
  var d = parsent('1', 10):  //10進数
  var e = '1' - 0:

●画面項目と型
　・JSはHTMLと連携することが多い
　　　多くのHTML要素の持つデータは文字
　　　数値は選択(select)の番号など
　・JS上で常に文字か数値かを意識する

【配列】
　・配列とは単に「同じ型の連続」

●配列の例
 var a = ['x','y','z']:
 // a[0]='x', a[1]='y', a[2]='z'

【配列の宣言方法】
 ⓵var a = ['x', 'y']:
 ⓶var b = new Array['x', 'y']:
 ⓷var c = Array['x', 'y']:
 ⓸var d = []:
 　d[0] = 'x';  d[1] = 'y':
(⓵、⓶、⓷どれも同じ結果となる。書き方の統一はすべき)

【連想配列】
　配列の[0～]部部を、数値ではなく文字で制御
　➡いわゆるkeyとValueの関係
 var p = (name:'yamada', age:24):
 p.nameやp['name']で'yamada'が取得できる
　サーバーとの通信時にもよく使う


【制御文】

【関数】
●まとまった一定の処理
●前出のparselntなど
　➡StringやNmberは組み込みオブジェクト
●すでに準備されているものは「組込関数とよぶ」
●自分で作成することもできる
　➡分かりやすい名前、被らない名前が必要

【よく使う関数】
●encodeURI, decodeURI
　➡URIに利用不可な文字が含まれていても利用できる文字列に変換する機能
●isNaN
　➡数値チェック時に利用できる(数値ではないかどうかをチェックする)
　➡非数の時にtrueを返すことに注意
●parseInt, parseFloat
　➡文字列を数値化する

【自作関数】
●function 関数名 (引数) {
  //処理
  return 戻り値;
 }
●一般的な言語とほぼ同じで、プロジェクト内で命名規則を設ける

【匿名関数】
●JSでは多様する傾向にある
　➡世の中のサンプルでも多い
●生成箇所と実行箇所がまとまる
　➡JSの文化の中での可読性向上

<span id = "test">ボタン</san>
var d = document.getElementByid("test");
d.onclick = function() {
   //クリックの処理
}
d.onclick = bottonClick;
function bottonClick() { 
   //クリックの処理
}


【jQuery】
●覚えてしまえば簡単
●一括操作が行える
●操作対象のクラス名、IDをしっかり設計する

【jQueryの画面操作】
・$("p")　➡すべてのp要素を取得
・$("#sample")　➡sampleというIDの要素を取得
・$(".title")　➡titleクラスの持つ要素すべてを取得
・$("#sample a")　➡指定ID内の全てのa要素を取得
・$("#sample >a")　➡指定ID直下のa要素を取得
・$(".title")　➡titkeクラスを持つ要素すべてを取得
・$("#sample a:first")　➡指定ID直下にある最初のa要素を取得
・$("#sample a:last")　➡指定ID直下にある最後のa要素を取得
・$("#sample a:eq(n)")　➡指定ID直下にあるn番目のa要素を取得
・$("#sample a:even")　➡指定ID直下にある偶数番目のa要素を取得
・$("#sample a:odd")　➡指定ID直下にある奇数番目のa含むp要素を取得
・$("a[href=/index.html]")　➡属性hrefが/index.htmlである要素を取得

【セレクタを利用した画面操作】
・$(セレクタ).css("属性名","値");　➡スタイルシートの値を動的に変える
・$("a").css("color":#ffffff);　➡aタグの文字色を白に変更
・$(セレクタ).text("文字列");　➡中の文章を書き換える
・$("p").text("テスト");　➡すべてのｐタグの文字をテストに変更
・$(セレクタ).html("文字列");　➡中のHTMLを書き換える
・$(セレクタ).html(<a href="">こんにちは</a>);　➡すべてのｐタグのhtmlを変更
　　　　　　　　　　　　　　　　　　　　　　　➡textと違い、htmlタグが利用可能
・$(セレクタ).prepend(html);　➡要素内の先頭にhtmlを追加
・$(セレクタ).apppend(html);　➡要素内の最後尾にhtmlを追加
・$(セレクタ).replace(html);　➡要素をhtmlに置換
・$(セレクタ).hide();　➡選択要素を非表示にする
・$(セレクタ).show();　➡選択要素を表示にする
・$(セレクタ).toggle();　➡選択要素の表示、非表示を切り替える
・$(セレクタ).fadeIn(duration);　➡選択要素をゆっくり表示する
・$(セレクタ).fadeOut(duration);　➡選択要素をゆっくり非表示にする
・$(セレクタ).fadeToggle(duration);　➡選択要素の表示、非表示を切り替える

【セレクタで帰ってくるオブジェクトの注意点】
●取得できない場合でも動作する　
　➡処理はされず、エラーとならない
　➡jQueryでなく標準のＪＳで操作するとエラー
●０件の可能性があるのか、複数件の可能性があるのか、常に意識してプログラミングする


【よく使うイベント】
●イベントとthis
　・htmlのonclick～という記載は多用する
　・onclickをjQueryで追加することも多い
　・クリック、ドラッグ＆ドロップ、キー操作、タイマーイベント、がメインになる

【イベントに設定する関数】
function clickButton() {
  //ここでthisという記述をする
  $(this).css('color','red');
  //this=クリックされた要素が取得できる
}
➡「クリックされた行の～」という処理が可能


【イベントの動的生成】
onclick(HTML上で記載)
<span onclick="click();>テスト</span>"
➡HTML生成時に記載する
➡表示要素が固定的になる
➡機能の実行ボタンなどはこの形式


【onclickの動的生成】
$("<div>")on("clic".function() {
  click();
});
➡動的に要素生成する場合に利用する
➡検索結果の行ごとにボタンがある場合など
➡匿名関数が利用できる


【非動機通信】
●一部分の情報だけ取得し変更したい場合に使われる

【よく使われるパラメータ一覧】
・async　　　　　同期、非同期の設定
・contentType　通信に利用するHTTPのcontent-type
・data　　　　　送信する値
・dataType　　　送信データのタイプ
・timeout　　　　タイムアウト時間の変更
・tyoe　　　　　POSTまたはGET
・url　　　　　　リクエスト送信先

【jsonを送信したいとき】
⓵連想配列を作成　➡このとき画面項目名とＤＢ名を合わせる
⓶jsonデータに変換
⓷送信
var data = {名前:$(セレクタ).val(), 名前:$(セレクタ).val()}
var json = JSON.stringify(data);　➡組込オブジェクトを利用

【jsonを受信したとき】
⓵受け取ったjsonを評価
⓶問題なければループ処理(が多い)
⓷画面に反映させる(ケースが多い)
.done(res) {
  if('datas' in res) {   ➡データが正しいか(サーバ側と仕様を決めておく)
    res.datas.forEach(data) {　➡受け取ったデータのループ処理(複数データを受取る前提)
      $p = $('<p>').text(data.name);　　
      $('mainArea').append($p);　➡画面要素を生成して追加
    }
  }else{
      エラー処理
  }

【JavaScriptの効率的な開発】
・開発者ツールでWEB開発は楽になる
・ブラウザごとに仕様が異なる
・JSは特に開発者ツールが重要

●キャッシュを意識する、開発中はキャッシュされないように設定する
　➡自分だけなら開発者ツール
　➡開発チーム全体なら現在時刻を付与
●リリースごとにキャッシュクリアされるようにする
　➡***.js?t=201804011500　など

【console.log と consol.table】
・console.log(変数)でログを出力できる
・jsonなどのデータはconsol.table(変数)
※複雑なデータもテーブルに出力されるので非常に楽

【window.onerror】
・エラー発生時のハンドリングが可能
window.onerror = function(msg,file,line,columm,err)
{
  console.log(msg + file + "" + line);
}

【Object.obsarve】
・Google Chromで利用可能
・オブジェクトのプロパティ変更が行わてた箇所を特定できる
　なぜか値が変わってしまっている、という場合に非常に便利
objects.observe(object.function(changes) {
});

【comsole.trace();】
・プログラムの流れが確認できる
・下記のようにすれば、objectが変更された原因を特定できる
Objects.observe(object.function(changes) {
  console.trace);
});



