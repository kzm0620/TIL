【単体テストとテストケースの作り方】

●QCD　(Quality Cost Delivery)

●これまでシステム、ソフトウェアの品質は、機能の正しさを判断するためのテストデータを作成し、
　その後の長期にわたるテストで欠陥が出にくくなければ品質のよいシステム、ソフトウェアである
　と考えられてきた。

　近年では、単に欠陥がなければ品質のよいシステム、ソフトウェアであるわけではない。
　対象とするシステム、ソフトウェアに求められる特性を実現できていることが重要。

　
●機能要求　Ａ
　ユーザーがソフトウェアにどのような機能を必要としているかを表す要求

●非機能要求　Ｂ
　ソフトウェアの提供する機能が達成すべき性能や制限を表す

例）インターネットバンキングで
　・預金が送金できること　A
　・送金ボタンを押して１０秒以内に送金処理を終えること　B
　・本人以外が勝手に預金者の口座を使って送金できないこと　B　

【ISO 25000】
　ソフトウェアの品質を、利用時の品質、外部品質、内部品質

●SE(設計)➡プログラマー(⓵実装、⓶単体テスト実装、⓷単体テスト実施)　が基本だが

⓶単体テスト➡SEにレビュー➡⓵実装➡⓷単体テスト実施　の順がおすすめ


【単体テスト】
・単体テストの「単体」に定義はない
・個々のユニットのロジックが正常に処理するか、また異常に処理しないか確認する目的
　(多くの場合、異常系のテストが不足している)
・分離してテストが可能なソフトウェアを検証すつるテスト
・スタブ、ドライバ、シュミレーター、などを使って、モジュール、プログラム、
　オブジェクト、クラスなどをテストする。
・ホワイトボックス、ブラックボックステスト
・現場での呼び方➡Unit Test(略してＵＴ)

【テストダブル】
●ドライバ　➡　テストモジュールを呼び出すプログクラム
●スタブ　　➡　テストモジュールに呼び出される代替えプログラム




【ホワイトボックステスト】
●内部構造プログラムの構造に着目したソフトウェアテスト
・命令網羅（C０）　真偽値に関わりなく全ての命令を最低でも１回は実行する方法
・分岐網羅（C１）　全ての分岐において、全ての分岐経路を最低１回は実行する方法
・条件網羅（C２）　複数条件で起こりうる真偽ち分岐の組み合わせ経路を実行する方法

【ブラックボックステスト】
●内部構造の入出力に着目し、動作確認するソフトウェアテスト
・同値分割　　➡有効、無効なデータ範囲のそれぞれの代表値を用いるテスト
・境界値分析　➡有効、無効なデータ範囲の境界となる値を用いるテスト
・同値分割・境界値分析のパターンを洗い出す方法
　　　　　　　➡複合的なパラメータの関係を表したもの

●デシジョンテーブル
入力と原因および対応する出力と結果の組み合わせを表形式で表し、テストデータとして採用する
組み合わせのパターンが多い場合に用いられる。

●エラー推測　エラーが発生しそうなパターンを推測しテストケースを作成する手法
・最大値、最小値
・少数
・空文字、スペース(半角、全角)、ゼロ、null
・入力されることを意図していない文字種
・うるう年、存在しない日付、時刻


【テストケースを洗い出す手チェックシート一例】

●ブラックボックステスト　
　・同値分割
　・境界値分析
　・デシジョンテーブル
　・ステートマシン
●ホワイトボックステスト
　・命令網羅
　・分岐網羅
　・条件網羅
●エラー推測
　・最大値、最小値
　・少数
　・空文字、スペース(半角、全角)、ゼロ、null
　・意図していない文字種
　・うるう年、存在しない日付、時刻


【テストツール】
●単体テストはプログラムの修正があれば何度も実施する必要がある。　
　ただし、毎回まじめにテストすることは困難
・テストツールを使用してテストを自動化しておけば何度もテストの実施が可能。
・テストツールは、テストケースを作成(コーディング)する必要があり、
　その分のコストがペイできなければ導入すべいではない。
　➡手動で目視で確認したほうがよい場面もあるので極端に考えなくてよい


【Javaプログラムの単体テスト用のフレームワーク】
●https://junit.org/junit5/
●Javaエンジニアに自然に受け入れられるように設計
　➡テストプログラムを記述するために、新たな知識や習得はほぼ不要
●Eclipseには標準で導入されている

【プロジェクトのビルドパスにjunit.jarrの追加が必要】
●Eclipseのパッケージ・エクスプローラーやプロジェクト・エクスプローラー上の
　該当のプロジェクトを右クリックする。
●ビルド・パスを選択する
●ビルド・パスの構成を選択する
●Javaのビルド・パスのライブラリで、右のほうにある「ライブラリの追加」ボタンを押す
●junitを選択し、次へボタンを押す
●junitライブラリで、junitライブラリ・バージョンを確認し、完了を押す


【テストクラス】
●テストプログラムをテストクラスと呼ぶ
●テスト対象となるクラス１つにつき、テストクラスを１つ作成
　テストクラスは「(テスト対象のクラス名)Test」が一般的




●ソースコードの保管　➡　Git, SVN, CVSなど
●ビルドツール　　　　➡　Maven, Gradleなど
●テストツール　　　　➡　JUnit, Selenideなど
●バグ報告の管理ツール　　　➡　Redminem, Tracなど
●他の管理支援ツールを自動っ実行する　➡　CIツール(Jenkins, Apache, Continuumなど)
