【データ活用】
●合計、平均など値の集計をしたい
●複数の表のデータを１つの表から検索したかのように表示したい
●２つの表において、一致するデータを表示したい
●２つの表において、一致しないデータを表示したい


【集計値を求める】
●SELECTに集計関数を使用して求める
●集計関数はWHEREでは使用できない
●部門ごとのように何かのグループ単位で集計する場合は、GROUP BY句えお使用する


●構文
SELECT 集計関数
[,グループ処理基準列][,グループ処理基準列]
FROM　テーブル名
[WHERE　　　表示対象を限定する条件]　➡省略できる
[GROUP BY　グループ処理基準列]　　　➡省略できる
[ORDER BY　並び順の基準にする列]　　➡省略できる

●集計値を表示対象にしたい場合は、HAVINGを使用する

●例
SELECT COUNT(*),COUNT(comm),AVG(comm)
FROM smp
●例
SELECT smpno,SUM(sal),MAX(sal),MIN(sal)
FROM smp
GROUP BY smpno
●COUNT(*)はレコード件数、COUNT(comm)はcomm列におけるNULL以外のレコード件数

【集計関数】
●ＳＵＭ　　　合計　数値型のみ　
●ＡＶＧ　　　平均　数値型のみ
●ＭＡＸ　　　最大　日付の場合、最も新しい日付。文字列の場合、最も大きな文字コード
●ＭＩＮ　　　最小　日付の場合、最も古い日付。　文字列の場合、最も小さな文字コード
●ＣＯＵＮＴ　件数　指定した列のNULL以外の件数
　　　　　　　　　　アスタリスクを指定すると全レコード件数
　　　　　　　　　　(検索条件が指定してある場合は条件に一致したレコード)
　　　　　　　　　　DISTINCTを使用すると一意な値の件数(重複を省く)


【集計値を表示条件にする】
●構文
SELECT 集計関数
[グループ処理基準列],[グループ処理基準列]
FROM テーブル名
[GROUP BYグループ処理基準列]
HAVING　集計関数　比較演算子　値|式
※HAVINGには集計関数以外(GROUP BY句で指定した列)を記述することが可能。


【注意事項】
●SELECT, HAVING. ORDER BY句には集計関数またはGUROUP BY句で指定し列のみ記述する
●集計関数を表示条件に使用する場合は、HAVINGを使用する
●列を表示条件に使用する場合は、WHERE句を使用する(HAVINGの使用は避ける)

-------------------------------------------------------------------

【結合】
●複数のテータを１つの表から取り出したかのように１行にして表示することができる。
●同じ表の異なるレコードを結合することができる。

【結合方法】
●結合条件に使用する列が同じ列名、同じデータ型の場合「NATURAL JOIN」を使用することができる
●同じ名前に列複数あるが、その中の一部しか結合条件に使用しない場合「USING」を使用する。
●結合列の名前は同じだが、データ型が異なる場合、USINGを使用する
●結合列の名前やデータ型の一致を気にせずに「JOIN ON」を使用して、結合することができる


【JOIN ON を使用した結合】
●構文
SELECT 表示したい列
FROM 結合する１つめの表
JOIN 結合する２つめの表
ON 1つめの表と、２つめの表を結合する条件
[JOIN 結合する３つめの条件]
[ON 2つめの表と３つめの表を結合する条件]
※結合対象となるレコードを限定したい場合は、すべての結合条件を記述した後にWHEREで指定する

●例
SELECT d.deptno, d.dname, e.empno, e.ename
FROM dept d (分かりやすくするため別名を付けてここでは「d」と呼ぶ)
JOIN ON emp e (分かりやすくするため別名を付けてここでは「e」と呼ぶ)
ON d.deptno = e.deptno (同名のdeptなので明確に分ける必要がある)

【注意事項】
●同じ名前の列が存在する場合は、列名の前に表名を修飾する(NATURAL JOINが使える)
●FROM、JOIN句において、表別名を指定することができる
●表別名を用いた場合、列名の修飾は表別名を使用する
●複数の条件を組み合わせて結合する必要がある場合は、ON句において「AND」を使用する


【結合列名が同じ場合】
●構文
SELECT 表示したい列
FROM 結合する１つめの表
NATURAL JOIN 結合する２つめの表
※結合条件を指定する必要はない

【注意事項】
●同じ名前、同じデータ型の列がすべて結合条件に使用される
●同じ名前の列が存在しても、表明で修飾してはいけない

【結合列名の一部を使用する場合】
構文
SELECT 表示したい列
FROM 結合する１つめの表
JOIN　結合する２つめの表
USING (結合条件に使用する列)
      ([,結合条件に使用する列])
※列名は同じだが、データ型が異なる場合もUSINGを使用する

------------------------------------------------------------------

【副問い合わせ】
●２つの表において、一致するデータまたは一致してないデータを表示することができる
●単一列を戻すことも複数列を戻すもともできる

【注意事項】
●副問い合わせが単一レコードを戻す場合と複数レコードを戻す場合では、
　比較演算子を変える必要がある。
　(どちらか分からない場合は複数れーどを戻すと考えて記述する)
●副問い合わせからNULLが戻される場合は「NOT IN」ではなく「NOT EXISTS」を使用する。
　(あるいは、副問い合わせ内でNULLを対象から外す)

●構文
SELECT 表示したい列
FROM 表示する列が含まれる表
WHERE 列名　比較演算子
    (SELECT 比較する列名
     FROM 比較する列が含まれる表
     WHERE 対象レコードの条件)
※ORDER BY は副問い合わせに含めることはできない

●例
SELECT department_id, sdepartment_name
FROM departments
WHERE department_id =
  (SELECT department_id
   FROM employees)
   WHERE employee_id = 102)
➡102番さんが所属している部門番号と部門名は何かを副問い合わせする記述


【まとめ】
●集計関数を用いて、合計、平均などを求めることができる
●グループ単位で集計する場合は「GROUP BY」句を使用する
●結合には「JOIN ON」,「NATURAL JOIN」,「USING」を使用する方法がある
●副問い合わせを用いて２つの表に一致するレコード、一致しないレコードを求めることができる
●一致する行を求めるのは「EXISTS」、
　一致しない行を求めるのは「NOT EXISTS」を使用する


