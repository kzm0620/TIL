【行と表の挿入】INSERT

【新規レコードの挿入】
　●INSERT文を使用する
　●VALUSE句を使用して、１行ずつレコードを挿入することができる
　●SELECT文を指定して、表のデータを挿入することができる（レコード/値のコピー）
　●挿入を取り消す場合は、トランザクションをロールバック(ROLLBACK)する

　●構文　１行挿入
　INSERT INTO テーブル名
　VALUES(値1，値2,....)

  例
  INSERT INTO smp
  VALUES(50,'開発部')

【注意事項】
・制約違反、不適切なデータ型、有効桁数を超える値を指定すると実行時にエラーになる
・対象列を指定する場合は、NOT NULL、PRIMARY KEYを指定した列を含むようにする。
・値を入れない場合は、列指定を省略するか、VALUES句においてNULLと記述する

【NULLの挿入例】
●指定しない列はNULLになる
●明示的にNULLを記述する（他人が見たときに意図的にNULLにしたのが明確になる）


【SELECTの挿入例】
●INSERT INTO テーブル名
　SELECT *｜列名 |式　FROM　テーブル名
  WHERE 検索条件

例 INSERT INTO smp2 SELECT * FROM smp;
　(表に格納されているレコードを挿入対象にする場合は、挿入先の列の数とデータ型を合わせる必要がある)

【既存値の変更】
●UODATE文を使用する
●WHERE句の条件に一致したレコードの対象列の値を変更することができる
●対象の複数の列を変更することができる
●変更を取り消す場合は、トランザクションをロールバック(ROLLBACK)する

●構文
UPDATE テーブル名
SET 列名１＝値１| 式１[列名２＝値２[式１,.....]]
[WHERE　対象レコード条件]

例
UPDATE smp
SET sal=sal*1.1 , smpno=NULL
WHERE smpno=7788
（値の代わりに式を指定することも可能。文字列、日付の場合は単一引用符で値も囲む）


【注意事項】
・WHERE句を指定しない場合は全レコードが対象になる
・制約違反、不適切なデータ型、有効桁数おｗ超える値を指定するとエラーになる
・FOREIGN KEY/参照整合制約により参照されている列は変更できない場合がある


【レコードの削除】
●DELETE文を使用する
●WHERE句の条件に一致したレコードの対象の値を削除することができる
●削除を取り消す場合は、トランザクションをロールバックする

●構文
DELETE FROM テーブル名
[WHERE 対象レコード条件]

例
DELETE FROM smp
WHERE smpno = 50　（テーブルの５０番を削除する）
(FOREIGN KEY/参照整合制約により参照されるレコードは参照しているレコードを先に削除する)

【注意事項】
●WHERE句を指定しない場合は全レコードが削除対象となる
●全行削除しても、テーブルは削除されない
●FOREIGN KEY/参照整合制約により参照されているレコードは削除できない場合がある



【変更の確定と取り消し】
●変更処理は、確定または取り消しを行う必要がある
●複数の変更をまとめて確定/取り消しすることができる
●確定　　　COMMIT文を使用
●取り消し　ROLLBACK文を使用
●確定した変更を取り消すことはできない


【トランザクション】
●最後に変更を確定、取り消ししてから次の確定、取り消しまでの一連の処理のこと
●BEGIN/START TRANSACTION文で開始する
（BEGIN/START TRANSACTION文を使用せずにトランザクションを開始するRDBMCもある）


【データの表示】
●SELECT文を使用
●SELECT句に表示する列を指定する
●WHERE句を使用して表示対象となるレコードを限定することができる
●ORDER BY句を使用してデータの表示順を指定するこちができる

●構文
SELECT *列名|式|定数
FROM　テーブル名
[WHERE 表示対象を限定する条件]
[ORDER BY　並び順の基準にする列]

例
SELECT　列１、列２....
FROM smp

例
SELECT sal + (sal * comm)
FROM smp
(足し算、引き算、掛け算、割り算が混在する場合、掛け算、割り算が先に処理される
　かっこを使って処理の順番を変えることができる)

【定数を表示する】
例
SELECT　100000　FROM　smp
例
SELECT '名前は',ename
FROM smp
（数値以外の定数は''で囲む。レコード件数分の定数が表示される）

【注意事項】
●SELECT句で指定した列名が結果表示のタイトルになる
●式や定数を指定した場合は、指定した式や定数がタイトルとして表示される

【別名を指定する】
SELECT　[AS] 別名
FROM　テーブル名

SELECT [AS] ”別名”
FROM　テーブル名
（命名規則に反する別名を使用する場合は、""で別名を囲む）


【重複値を省いて表示する】　DISTINICT
SELECT　DISTINCT　列名
FROM　テーブル名
例
SELECT　DISTINCT smpno,job
FROM smp
(列名のかわりに式や定数を指定しても構わない。別名を指定することも可能)

【注意事項】
●DISTINCTは、表示するレコード全体に対して重複を省く指定をする
●重複の列を指定する場合は、SELECT句の先頭に１度だけ指定する
●間違った例
SELECT smpno,DISTINST job
FROM smp
(jobだけ重複を省く、という書き方はできない)


【表示対象レコードを限定する】WHERE
SELECT (列、式、定数)
FROM テーブル名
WHERE 列名 比較演算子 (列、式、定数)
(比較演算子の左右どちらかに列名を記述してもOK)


【複数の条件を指定する】AND / OR
....
WHERE 列名　比較演算子　(列名、式、定数)
AND | OR 列名 比較演算子　(列名、式、定数)
(ANDとORが混在する場合、ANDが先に処理される。かっこを使用して処理の順番を変えることが可能)


【範囲を指定する】BETWEEN
例
SELECT FROM smp
WHERE smpno NOT BETWEEN 10 AND 20
(NOT BETWEEN AND は OR と同じ意味)


【値のリストと一致するものを表示する】　IN
例
SELECT FROM smp
WHERE smpno IN (1123444)
(INは、=OR=　と同じ)


【指定した値を含むものを表示する】　LIKE
●任意の１文字は、アンダースコア(＿)
●０文字以上は、パーセント(%)
例
SELECT FROM smp
WHERE aname LIKE'_〇〇〇%'
(ESCAPEを使用してアンダースコア、パーセントそのものを含むものを求めることもできる)


【NULLを条件にする】　comm
SELECT FROM ｓｍｐ
WHERE comm is NULL
(comm=NULL または comm<>NULLと記述してもエラーにはならないが正しい値は得られない)


【列の並び順を指定する】　ORDER BY
SELECT FROM テーブル名
[WHER 表示対象を限定する条件]
ORDER BY 列名１ [ASC | DESC]
(デフォルトの並び順はASC（昇順）)


【注意事項】
●ORDER BY句を指定しない場合、どんな順で表示されるか分からない
●NULLが含まれる場合、RDBMSによっては表示順が異なる
●NULLを先頭(NULL FIRST)か最後(NULL LAST)に表示するか指定できる場合もある
