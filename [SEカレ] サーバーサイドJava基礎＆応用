●サーバーサイドJavaを理解するポイント
⓵分業
　Servlet　➡　プログラマが作るもの
　JSP　　　➡　デザイナが作るもの
⓶オブジェクト指向プログラミング
　➡あらかじめ用意されているオブジェクトを使う　
　　オブジェクトは多くの機能を持った大きな部品
　　内部の仕組みを知らなくても使える

●Java関連の代表的なWEB技術
　・クライアントサイド　HTML　CSS　デザイナ向け
　　　　　　　　　　　　JavaScript プログラマ向け
　・サーバーサイド　　　JSP　動的なWEBアプリケーションの表示役となる(普段見てるサイト)

　　　　　　　　　　　　Servlet　リクエスト取得　ページの切り替え、ＤＢアクセスなど制御役
　
　Eclipse　　　　➡　Javaの統合開発環境
　Apache Tomcat ➡　WEbアプリサーバー
　Pleiades 　　　➡　Eclipse、Apache Tomcatなど開発用のプラグインをまとめたツール

・Pleiades　はメニューからすべて展開を選択して、展開したら解凍できる
・フォルダはＣ￥を指定する
・パースペクティブでJava EEを選択する
・文字コードをＵＴＦ－８に統一する
　ウインドウ➡設定➡一般➡ワークスペース
・サーバーを作成(選択)する
　Eclipse下部にある使用可能なサーバーがありません、、、クリックする
　新規サーバーウインドウ
・動的ＷＥＢプロジェクトを作成する
・サーバーに動的ＷＥＢプロジェクトを追加する
・サーバーの開始と停止
　適宜サーバーの停止を心がける➡古い内容のまま動作しつづけてエラーを起こす場合がある
・サーバーの動作の確認する

●Servletの仕組みと作り方
・サーバーで動く小さなものという意味
・専用のクラスが用意されているので継承するだけ（Javaにおいては付け足し)

●JSPの仕組みと作り方
・HTMLの中に<% と %>で囲んでJavaのコードを挿入したテキストファイル
・ファイル名の拡張子は.jspにする
・JSPはServletに変換されてから動く

●フォームのリクエストパメータを取得する方法
 <form action"送り先のURL" method="post">.....</form>



【お決まりの処理のためそのままで大丈夫のやつ】

●HTTPレスポンスヘッダのコンテンツタイプに、HTMLであることとUTF-8であることを設定する
　response.setContentType("text/html; charset=UTF-8");
●HTTPレスポンスに書き込む機能をもつオブジェクトに所得する
　PrintWriter out = response.getWriter();

●誤ってウインドウを閉じてしまった場合
ウインドウメニュー➡パースペクティブ➡リセット➡で復元できる


