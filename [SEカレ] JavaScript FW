【フレームワークとライブラリ】
●自由度が高く、小さな機能を提供するだけのものを「ライブラリ」
　もっとも大きな機能を提供するものが「フレームワーク」と言われる
●プログラムの「フロー」、作る処理そのものの流れまで提供しているものを
　フレームワークと捉えるのが一般的な流れ（ログインなど）
●提供する側の名づけにもよる

【JavaScriptフレームワーク】
●jQuery　➡ライブラリ。非常に人気があったが、現在は下火
●React　➡近年人気のフレームワーク。しっかりした作り(facebook社)
●Vue.js　➡自由度の高さから、根強い人気
●Angular　➡自由度が高く、大きなプロジェクト向き
●Node.js　➡サーバーサイド。フレームワークというより環境(JavaScriptの実行環境)

【コーデングと設計】
●多くの場合フロントエンドを担当
●システム全体ではなくフロントのパーツ(コンポーネント)とデータの関係を考える
●設計思想はFWごとに異なるので注意

【共通的な注意点】
●情報量とトレンド
●海外のFWは英語ベースの情報が多くなる。
●セキュリティ面なども含めたバージョンンにより、今までのプログラムが
　動かなくなる可能性がある
●学習コストも考慮し、FWの選定をしっかりと行うことが重要


【Reactの基本】
●フロントエンドのフレームワーク
●JacvascpitのフレームワークだがReact Nativenoの登場により、
●iOSやAndroidアプリも開発できるようになった
●基本手にはUIパーツを提供するだけ
●コンポーネントという概念が重要

【データ更新とレンダリング】
●データ更新時、対称のコンポーネントだけを効率よく更新、レンダリングする
●jQueryのように「対象要素を探す」「値を更新する」という手順は踏まなくてよい
●コンポーネントを作るときHTMLに近い形(JSX)で記述するため分かりやすい

【ライセンス的にも使いやすい】
●fecebookがMITライセンスに変更した
●一般向け(BtoC)のWEBサービスにも、社内システムにも使いやすいライセンスになった
●オープンソースかつ、普及しているためセキュリティ的にも安心感がある

【JSXとトランスパイラ】
●ReactはJSXという記述方式を持つ
●JSXはそのままではブラウザで実行できないため、JSXをJavaScriptに変換する
●こういったプログラム言語に変換することを「トランスパイラ」と呼ぶ
●Reactは「Babel」というトランスパイラを用いて変換している

【Reactの使い方】
●Node.jsをインストールすることで、「npm」と「npx」がインストールされる
●Node.jsのサイトからインストールできる
●Node.jsをインストール後、Reactのプロジェクトを作成する
●プロジェクトのフォルダを作る
●「npx create-react-app react-sample」

【セットアップ】
●自動的にインストールされたファイルを編集する
●index.js　➡表示されているトップページ
　　　　　　　中で<App/>という表記があり、そこでApp.jsを読み込んでいる
●App.js　➡トップページから読み込まれている。
　　　　　　function App()の中がJSX
　　　　　　ほとんどHTMLの記載になっている

【自分のコンポーネントを作ってみる】
●Hello.js
●自分でファイルを作成する
●中にJSXでコンポーネントを記述する
●JavaScriptとHTMLを組み合わせのようなもの

【Hello.js】
●import React from 'react';
 export default function Hello(props) {
   return <div>こんにちは {props.name} さん</div>
 } 　(引数名はHTML要素でいう属性になる)

【作ったコンポーネントを配置する】
●App.js　➡作ったHelloコンポーネントをApp.jsに配置する
　　　　　　HTMLの要素と同じようにHelloという要素が作成されたイメージ
 <App/>もindex.js内で同じように読み込まれている
 <Hello>の属性はHElloの引数

●App.js
 <div className = "App">
   <header className = "App-header">
   <Hello name ="山田"></Hello>
Hello要素　引数nameを指定


【関数コンポーネントとクラスコンポーネント】
export default function Hello(props) {
   return <div>こんにちは {props.name} さん </div>

export default class Hello extends React.Comronent {
  render() {
    return <div>こんにちは{this.props.name}さん<br />
   これはクラスコンポーネントです</div>
  }
}
●どちらでも同じように呼びさせる


