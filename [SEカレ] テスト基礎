●高品質とは？
立場によって品質の捉え方が違う
利用者➡効率よく使える
開発者➡美しいソース
管理者➡今後楽に運用できること

品質に正解がなくても、不正解はある。
不満な部分ほど目立つ

「品質はある人にとっての価値である」
　　　　　　　　　　　G.M.ワインバーグ

「品質はCSである」(Customer Satisfaction) 顧客満足度のこと

・第三者支店を取り入れる工夫
・定量評価が有効
・じゃあなんか指標作ろうぜ！
➡ソフトウェア品質特性というものが生まれる。分かりやすくてシンプル

⓵機能性
・ユーザーの要求を満たす度合い
・要件定義で明確にした、ソフトウェアが持つ「能力」を満たしていること

⓶信頼性
・正常に動作し続ける度合い
・必要な期間は正常に動作する
・イレギュラーに対する耐久力をもつ
・障害発生時に速やかに回復できる

⓷使用性
・使いやすさ、理解しやすさ、操作のしやすさ、魅力のあるシステム　➡　近年では大事

⓸効率性
・システムが効率よく動作する度合い、レスポンスの速さ

⓹保守性
・対応容易の度合い
・機能追加、改修、環境変化などが対象
・障害発生時の問題点の把握、解析作業が容易であること

⓺移植性
・他環境以降が容易である度合い
・再構築だけでなく、ＯＳの変更などをどの程度の作業量で実現できるか

⓻互換性、⓼セキュリティを加えて８種としたものもある。


【品質とテスト】
・品質を理解し、テストが受け持つ役割をしることが重要
・不具合の抽出
・正常動作の確認

➡重要なのが７つの原則
・欠陥があることしか示せない
・全数テストはできない
・早期テストは有効
・欠陥は偏在する
・殺虫剤のパラドクス
・テストは臨機応変に
・バグゼロにこだわらない

●欠陥があることしか示せない
・欠陥がないことは示せない、つまりバグが無いとは言えない
　➡「正常動作する」ことを示す、

●全数テストはできない
・すべてのパターンをテストすること。これは全てできない
・テストではバグを取り切れない。
　➡優先度を決めてテストする、絶対が無い世界は大く存在する

●早期テストは有効
・早い段階で行うテストは効果が高い。特に他社に任せた部分などが重要
　➡設計のレビューは「バグ出し」

●欠陥は偏在する
・バグの多くは特定の箇所に集中する
　➡テストを偏らせすぎない、偏りは意識してテストする、原因分析が重要

●殺虫剤のパラドクス
・同じテストを繰り返しても効果が薄れていく
　➡単純なレグレッションテストは必要
　➡これまでのテストで網羅できている、は危険
　➡テストも複数人でのレビューを

●テストは臨機応変に
・今までこうやってきた、ではダメ。状況が異なればテストのアプローチも変わる。
　➡世の中のテストの手法をもう一度見直す。今までのアプローチにとらわれすぎない

●バグゼロにこだわらない
・バグをゼロにするために縮小しすぎない
　➡ユーザビリティの低下、バグゼロによる慢心、そもそもバグゼロは立証できない



【テストプロセス】
⓵準備　⓶実行　⓷完了　の３ステップ

●準備
⓵リソース(資源)の割り当て　⓶スケジューリング　⓷テスト設計　⓸データと環境の整備

⓵リソース(資源)の割り当て
・必要な機材や環境　➡　物理リソース
・テスト実行者の確保　➡　人的リソース

⓶スケジューリング
・リソースとともに時間軸で考える
　いつまでに、何をやるか、を決定する
　このとき、やったことに対して成果物が必ずある

⓷テスト設計
・テストすべき内容の検討。「この機能を」「この観点で」
　➡ただし、テストケースの作成は「実行」で
　➡開始と終了の基準を定義する。仕事の終わりを明確にする
　　品質の目標もここでルールを決めておく

⓸データと環境の整備
・テストに利用するデータは再利用が大切、人によって、環境によって出るバグなども多い
　➡環境構築の手順は重要、何度でも巻き戻せるデータを準備、スムーズにテストできることも重要



【テスト準備段階で作るもの】
⓵テスト計画書　　⓶テスト設計書

⓵テスト計画書
　・テスト品質目標
　・テスト対象機能
　・テスト項目の合否基準
　・テスト成果物
　・環境要件
　・トレーニング計画
　・スケジュール
　・プランニングリスクと対応策

⓶テスト設計書
　　・テストする機能(あくまで検討レベル)
　　・テストする方法(テスト技法など)
　　・テストケースの列挙(大枠)


【テスト実行プロセス】
●計画をもとに実行していく。基本的には「テストケース作成」もここに入る
　プログラムとテストの知識は全然違う

⓵テストケースの作成
⓶テスト手順の作成
⓷テストの実施、結果の保管
⓸インシデントの報告
⓹再テストの実施

⓵テストケースの作成
●設計書をベースに、テストケースを定義する
　・対象機能、入力仕様、出力仕様、テスト環境条件、テスト手順の特機事項

⓶テスト手順の作成
●テストを実施する方法を定義する
　・目的、特殊な要件、実施手順、合否判定基準

⓷テストの実施、結果の保管
●これまでの定義をもとに実施する
　・テスト実施結果報告書は保管する　➡　テストケースに記載することが多い
　・テストログ　➡　エビデンスの保管、スクリーンショットなど

⓸インシデントの報告
●バグがあった場合には報告を行う
　・テスト不具合レポート
　➡重大度、入力と出力、期待された結果、環境、再現手順を再現性、他のテストに与える影響

⓹再テストの実施
●バグが修正された場合、再テストを行う
　➡再テストでバグが出た場合、「前回はどうだったか」をきちんと確認する


【テスト完了プロセス】

⓵追加テストの検討
⓶レポートの作成
⓷納品物の整理
⓸テスト環境・データの保管
⓹保守部門に引き継ぎ
⓺振り返り


⓵追加テストの検討
●これまでの実施結果から、追加の必要性を検討
　➡これは実行プロセスでも意識する、バグの偏りやバグ数に不足えおチェック、原因を分析

⓶レポートの作成
●品質について「結果」をまとめる
●テストサマリーレポート　➡　要約、総合評価、未解決な不具合

⓷納品物の整理
●テストフェーズの成果物をまとめる
　➡要件定義などで定められた納品物をまとめる
　　エビデンスなどはこれを意識して保管しておく
　　この段階で焦らないように準備が大事

⓸テスト環境・データの保管
●再現できるように、が基本。計画段階からＯＳの保管方法なども決めておく
　➡近年では仮想環境もある
●データは、全パターン網羅したものを保管(バックアップ)
　➡１環境では網羅しきれないので注意

⓹保守部門に引き継ぎ
●テスト完了後、リリース作業に移行する。ここからは開発者は関われない
　本番環境が構築できるだけの情報が必要
　➡動作確認のためのデータなども準備する

⓺振り返り
●今回のテストの実施かた学べることをまとめる
　今後のテストのための情報を蓄積。特にデータ生成のスクリプトなどは重要
　➡オートテストなどのノウハウも振り返りも重要
