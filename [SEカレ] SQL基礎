【SQL】
●リレーショナルデータベースを扱うための言語。
RDBNSの標準の言語として広く普及している。

●RDBを操作する標準言語
　・RDB (Relational DataBase)　表形式でデータを保管するデータベース
　・大文字、小文字は区別しない

【DDL：データ定義言語】(Data Definition Language)
●CRETEでテーブルを作成したらDMLでデータを格納していく
・CREATE (作成）
・ALTER (変更)
・DROP (削除)

【DML：データ操作言語】(Data Manipulation Language)
・SERECT (取得)
・INSERT (挿入)
・UPDATE (更新)
・DELETE (削除)

【DCL：データ制御言語】(Data Control Language)
・GRANT (権限割当)
・REVOKE (権限取消)

【トランザクション制御】(取引記録)
・COMMIT
・ROOLBACK


【⓵データベースの作成】
●CREATE DATEBASE DB名;

【⓶テーブルの作成】
●CEREATE TABLE DB名.表名(列名、データ型[,...]);　([]は省略できると意味)
●テーブル名、列名には命名規則がある
　予約語（SQLのキーワード）使用できない
●定義できる列の数には制限がある
●例
CREATE TABLE　sampledb.student(no int,name varchar,score int);

【MySQL 整数のデータ型】
・tinyint    -128～127　を表現
・smalint    -32768～32767　を表現
・mediumint  -8388608～8388607　を表現
・int        -2147483648～2147483647　を表現
・bright     -9223372036854775808～92234.........　を表現

【MySQL 文字列のデータ型】
・char     固定長の文字列。
　　　　　　文字列を格納したときに指定の文字列になるように右側のスペースで埋められる
・varchar  可変長の文字列。
　　　　　　指定の文字列以内の文字列を格納できる

【実行手順】
・コマンドプロンプトで[mysql -u root -p]コマンドを実行
・パスワードを入力してMySQLに接続
・[show database]でDBの一覧を確認することができる
・[CREATE DATABASE DB名]でDBを作成
・[CREATE TABLE DB名.表名(no int, PRIMARY KEY name varchar(10),socore inta)
  (例として重複した番号が登録されそうになるとエラーを返す記述)
・[show tables in 作成したDB名]で作成できているか確認できる
・[desc DB名.テーブル名]でテーブルの列の状況が確認ができる
●DESC （デスクライブ：説明）
　テーブルを作成した後、どのような列で構成されているか確認できるコマンド

---------------------------------------------------------------------------
【SQLでデータ操作】　
●ログイン機能、商品情報の表示、注文情報の登録

⓵SELECT文：データを「取得」
＜ SELECT 列名 [,列名,...] FROM 表名;　＞
([]の前に「*」で全列取得可、「式」も利用可)
SELECT * FROM student;
SELECT no,score * 0.5 FROM student;

⓶INSERT文：データを「挿入」
＜ INSERT INTO 表明 [(列名,...)] VALUES(値,...); ＞
INSERT INTO student VALUES(1, '中野', 80);

⓷UPDATE文：データを「更新」
＜ UPDATE 表名 SET 列名 ＝ 値 [,列名=値,...];　＞
UPDATE student SET score = score + 5;

⓸DELETE文：データを「削除」
＜ DELETE FROM 表名; ＞
DELETE FROM student;
-----------------------------------------------------------------
【SQLで条件指定】
SELECT文、UPDATE文、DELETE文は「WHERE句」で条件を指定する

●SELECT文 { * | 列名 [,列名...] }
　 FROM 表明 [WHERE 所得条件]

・関係演算子： > , >= , < , <= , =(等しい), <>(等しくない) 
・論理演算子： AND , OR , NOT
・特殊演算子： BERWEEN , LIKE　など
SELECT * FROM student
  WHERE 50 <= score AND score <= 80 
  WHERE score BETWEEN 50 AND 80　(50点以上80点以下に該当するデータを探す)
  WHERE name LIKE '%佐藤'  (%は０文字以上の任意の文字列、*は任意の文字列)

●UPDATE 表明 SET 列名 = 値 [,列名=値...]
　　[WHERE 更新条件]

UPDATE student SET score =score + 5
  WHERE no = 1 
(１番の人のデータがプラス５点される記述)

●DELETE FROM 表明
   [WHERE 削除条件]

DELETE FROM student
   WHERE no = 1
(１番のデータを削除する)
-------------------------------------------------------------------

※重要項目※

【JDBC】
Javaのプログラムとデータベースの間に入って仲立ちをしてくれる部品のようなもの

【JDBC　更新処理】
●JDBCドライバを環境変数CLASSPATHに要設定
●JDBC(URL) 接続するDBを指定する文字列
 ➡[jdbc:mysql://(DBサーバ名)/(DB名)]　と記述が指定されている
●JDBC 4.0(Java SE6)以降はClass.forName()が不要

⓵DBに接続
[Driver Manegerクラス]　
・「JDBCドライバ」を管理するもの
・getConectionメソッドを呼び出すときに使用する
➡Connnection con = Driver Manager.getConection(URL、ユーザ名、パスワード);

⓶ステートメントを生成
[Connectionオブジェクト]
・DBとの「接続情報」を管理
・statement stmt = con.createStatement();
➡繋いでいるDBにSQL文を発行するためのstatementオブジェクトを取得できる

⓷SQLを実行
[Statementオブジェクト]
・「SQL文」を実行するためのオブジェクト
・int count = stmt.executeUpdate(SQL文);

⓸リソースを開放
・closeメソッドを呼び出してDBとの接続を切る作業を行う
・stmt.close();
・con.close();
  (オブジェクトを作られるcon→stamt、閉じるときはstmt→conと逆順になる)
↓
import java.sql.DriverManager;
import java.sql.Connecttion;
import java.sql.Statment;
(すべてjava.sqlのパッケージ含まれているクラスインターフェース)

※DBへの接続情報はプログラムの上部で変数(定数)に格納しておくと便利
●JDBCのプログラムは例外を発生する可能性があるため、
 [try-cath]ブロックを記述する
●close()メソッドは例外の有無に関わらず実行するためにfinalyブロックに記述する

Connection con = null;
Statement stmt = null;
➡メソッド内で定義した変数の有効範囲はその変数を宣言したブロック内の内部のみ。
　必ず実行させたい処理なのでtryブロックの外側で宣言する

try {
  //⓵DBに接続
  con = DriverManager.getConnection(URL,USER,PASS);
  //⓶ステートメントを生成
  stmt = con.createStatement();
  //⓷SQLを実行
  int count = stmt.executeUpdate(sql);
  System.out.println(count + "件更新しました");
※JDBCのプログラムは例外を発生する可能性があるため、try-cachブロックを記述する
} catch (Exception e) {
  e.printStackTrace();
} finally {
  try
    //⓸リソースを開放
    if(stmt != null) stmt.close(); (nullじゃない場合にstmtを呼び出す)
    if(con != null) con.close();
  } catch (Exception e) {
    e printStackTrace();
  }
※close()メソッドは例外の有無に関わらず実行するためにfinaryブロックに記述する
-----------------------------------------------------------------------

【JDBC 更新処理】
●検索処理のプログラムの全体の流れを理解する
●検索結果の処理方法を理解する

⓵DBに接続
⓶ステートメントを生成
(⓵と⓶までは流れは同じ)

⓷SQLを実行
Result rs = stmt.executeQuery(SQL文);
(実行するSQL文が更新系か検索系かによりステートメントから呼び出すメソッドが変わる)

↓検索↓

⓸検索結果の処理
[Result Set] 「検索結果」を保持する
  while(rs.next()) {
     getterメソッド呼び出し
  }
●ResuitSetは持ってきたデータを表形式で管理している
　カーソル(➡)でどの部分の行かを表している
　[next()]メソッドでカーソル移動ができる(戻り値：tuue)
　カーソルが最後の行を過ぎた場合に終了する(戻り値：false)
●列へのアクセス方法
  getXxxx("列名"/ 列番号)　※
  String name = rs.getString("name");
※getterメソッドの列番号は「１から始まる」ことに注意する

【ResultSetの主なgetterメソッド】
MySQLデータ型　　　 Javaデータ型　　　getterメソッド名
tinyint            byte             getByte(...)
smailint           short            getShort(...)
int                int              getInt(...)
bigint             long             getLong(...)
char               String           getString(...)
varrchar           String           getString(...)

●import java.sql.ResultSet;　を追加で記述する
  //⓷SQLを実行
  rs = stmt.executeQuery(sql);
  (戻り値でrsを取得することができる)
  //⓸検索結果の処理
  System.out.println("+-----+-------+");
  System.out.println("| no  | name  |");
  System.out.println("+-----+-------+");
  while(rs.next()) {
    System.out.print("| " + rs.getInt("no") + "￥t");
    System.out.print("| " + rs.getString("name") + "￥t");
    System.out.println("| " + rs.getInt("socre") + "￥t|");
  }
　(得られた情報を表形式で出力している)
  System.out.println("+-----+-------+");
} catch (Exception e) {
  e.printStackTrace();
} finary {
  try.......
----------------------------------------------------------------

【JDBC Prepared Statementの利用】
●Prepared Statementの特徴や使う場面を理解する
●Prepared Statementの使い方を知る

【Prepared Statement】
●似たSQL文を「繰り返し」実行するときに使用すると高速化する
⓵「？(INパラメータ)」入りSQL文を指定
  INSERT INTO student VALUES(?.?.?)
⓶「setterメソッド」で？に値を設定
　(？の部分を穴埋めするメソッド)
　記述例
　➡ps.setInt(1.7); 
　➡ps.setString(2."田中");
●setterメソッドの第一引数(INパラメータの場所の指定)は１から始まる
●setterメソッドの名前は第二引数(？に設定するデータ)のデータ型に合わせる
⓷SQLを実行
----------------------------------------------------------------

【WEBアプリとデータベースの連携】
●WEBアプリの開発方法(サーブレットとJSPの連携方法を振り返る)
●サーブレットとDBの連携方法を理解する

[実行]
↓　WEBサーバーにリクエスト
[Controller : サーブレット]
do Post(～) {
  Connection con = DriverManeger.getConnection(URL,USER,PASS);
  Statement stmt = con.createStatement();
  ResultSet rs = stmt.executeQuery(sql);
↓ SQL文を実行（）
  (SELECT name FROM student
    WHERE no = 1)
  (studentテーブルの１番の名前の情報を取得)
  rs.next(); （カーソルを下に移動する作業）
  String name = rs.getString("name");　（DBの列名からのname）
    :
  req.setAttribute("name", name); 
　(JSPでも利用するため変数nameをリクエストスコープに格納)
  RequestDispatcher rd = req.getReqestDispatcher("/~.jsp");
  rd.forward(req,res);
  }
↓ forward
[view : JSP]
生徒名は<%= request.getAttribute("name") %> です
(setAttributeで格納した"name")
↓　レスポンス
-----------------------------------------------------------------

【DAO】 
●DAOとは何かや使うメリットを知る
●サーブレットに処理が集中すると規模が大きくなり負担になる
　➡⓵よって平行開発ができなくなってしまう
　➡⓶プログラムの再利用が難しい
　➡⓷メンテナンス(修正)が大変
●DAOを使用したサンプルプログラムを理解する

【DAOとは】 (Data Access Object)
●サーブレットからデータ処理に関わる部分をクラスにして抜き出す
●データベース処理に必要な情報や処理をまとめて管理するオブジェクト

[Model：DAO]
class StuDAO {    （studentテーブルにアクセスするDAOクラスを定義）
     :
  void connect() {　（DBへの接続情報をメンバ変数でもたせておき、
    ⓵DBに接続　　　　　　　　　　　　　　　　connectメソッドで定義する）
  String select(int stuNo) {　
    ⓶ステートメントを生成
    ⓷SQLを実行
    ⓸検索結果の処理 }
  void disconnect() {
    ⓹DBを切断 }
↓
[Contoroller：サーブレット]
定義した変数を再利用するために、reqオブジェクトからsetAttributeメソッドを呼び出して
リクエストスコープの中に変数を格納する
↓
[View：JSP]
<%= request.getAttribute("変数名") %>です　の流れで出力できる

●DAOを使うことで平行開発や再利用が可能になり、メンテナンスもしやすくなる
-------------------------------------------------------------------------

【DTO】
●DTOとEntityとは何か使いどころを根本から理解する
●DTOのサンプルプログラムを理解する

【DTOとは】(Data Transfer Object)
●プログラム内でデータを転送するために使用されるオブジェクト

【Entityクラス】
●DBのテーブル構造を表すクラスで、テーブル１行分のデータを
　１つのインスタンスに対応させて使う
-------------------------------------------------------------------

【WEBアプリでDB処理(更新系)】
⓵注文情報をDBに登録する
⓶DBの在庫情報を修正する

●DBを更新するWEBアプリの処理の流れを理解する
●更新系のサンプルプログラムを理解する
--------------------------------------------------------------------

【制約】
●テーブルに正しいデータを維持するためのルール
●単一または列のグループに対して定義可能
・NOT NULL　　　　必須、NULLを認めない
・UNIQUE　　　　　位置　重複値を認めない
・PRIMARY KEY　　主キー　必須であり、一意でなければばらない
・FOREIGN KEY　　外部キー/参照整合性　参照先に存在する値でなければならない
・CHECK          チェック/検査　指定した条件を満たさなければならない


【NOT NULL 制約】
　・必須、NULLを認めない
　・列制約構文のみで定義可能
　　（一つの列で制約宣言ができる場合に使うもの）
例 CREATE TABLE sample
   (sample INT
   ,sample  VARCHAR(20)
   CONSTRAINS sample_name_nn NOT NULL　(CONSTRAINSで後から管理しやすいように名前をつけておく)
   )

【UNIQUE 制約】
　・一意重複を許さない
　・NULLは複数行あっても良い

例：列制約構文
   CREATE TABLE sample
   (.....
   ,email,VARCHARA(80)
   CONSTRAINS sample_email_u UNIQUE
   ,.....
   ,depto INT　
   )
-----------------------------------------------
例：表制約構文
   CREATE TABLE sample
   (....
   ,email VARCHAR(80)
   ,....
   ,dept INT
   ,CONSTRAINS sample_email_u UNIQUE(email)（どの列に対して制約をつけたいのか）
   )
   全ての列の定義が終わったからどの列にUNIQUE制約をつけるのかという意味


●１つの列に複数の制約を定義することが可能

例：列制約構文
　 CREATE TABLE smp
   (.....
   ,email,VARCHAR(80)
   ,CONSTRAINS sample_email_u UNIQUE
   ,CONSTRAINS sample_email_nn NOT NULL
   ,.....
   ,)
--------------------------------------------------
●実は制約の名前は省略することが可能
例：列制約構文
   CREATE TABLE smp
   ,.....
   ,email,VARCHAR(80) UNIQUE NOT NULL
   ,.....
   )
   (省略する場合はCONSTRAINは無くても大丈夫)


【PRIMARY KEY制約】
　●主キー（表内のレコードを識別する）
　●１つのテーブルにに１つしか定義できない

例：列制約構文
   CREATE TABLE smp
   (Smpno INT
   CONSTRAINS smp_pk PRIMARY KEY
   ,.....
   ,smpno INT
   )
---------------------------------------------
例：表制約構文
   CREATE TABLE smp
   (smpno INT
   ,.....
   ,smpno INT
   ,CONSTRAINS smp_pk PRIMARY KEY(smpno)
   )


【FOREIGN KEY 制約】
●外部キー/参照整合性（入力値は参照先に存在する値でなければならない

例：列制約
CREATE TABLE smp
(.....
,smpno INT CONSTRAINS smp_smpno_fk
REFERENCE smp(smpno)
)
------------------------------------------------------
例：表制約
CREATE TABLE smp
(.....
,smpno INT
,CONSTRAINS smp_smpno_fk FOREIGN KEY(smpno)
REFERENCES(smpno)
)


【CHECk 制約】
●チェック/検査（指定した条件を満たす）

例：列制約
CREATE TABLE smp
(.....
,sal INT CONSTRAINTS smp_sal_ck
CHECK（sal >= 80000）
,......
,smpno INT
)
----------------------------------
例：表制約
CREATE TABLE smp
(.....
,sal INT
,......
,smpno INT
,CONSTRAINts smp_sal_ck CHECK(sal >=80000)
)


【索引の作成】
●索引/インデックス
　・検索の速度向上（定義すると値が小さい順に格納され、場所も保管されている）
　・重複チェック

●UNIQUE、PRIMARY KEY制約を定義した列には、自動で索引が作成される。
●索引は手動で作成もできる
●列のグループを１つの索引として定義することもできる
●構文
CREATE INDEX 索引名
ON 表名(列名[列名,....])


【テーブル構造の変更】
●例：列の追加
　ALTER TABLE smp ADD
  (gender CHAR(1)
  CHECK(gender in) 'M','F'))　 (性別のチェック)

●例：有効桁数の変更
  ALTER TABLE smp  MODIFY
  (smpname VARCHAR(60))　　（数値の変更）

●例：列の削除
  ALTER TABLE smp DROP
  COLUMN salary　　　（slaryの列を削除）


【テーブルの削除】
●表を削除すると以下も削除される
　・表の定義、制約　
　・格納されていたデータ
　・索引
●構文の
　　DROP TABLE テーブル名
●索引だけの削除
　・UNIQUE, PRIMARY KEY制約によって作成された索引は削除できない。
　　（制約を削除すると一緒に削除される）
●定義されている表やデータには影響はない
●構文
　　DROP INDEX 索引名

【まとめ】
●テーブルの作成は　CREATE　TABLE
●テーブル名やカラム名は、各RDBMSの命名規則に従う
●テーブルに保存する値に適したデータ型を定義する
●データ型の表記は、各RDBMSに従う
●テーブル作成後、列の追加、削除が可能
●制約を大義するとプログラムなしで正しい値を維持することが可能になる
●UNIQUE, PRIMARY KEY制約を定義すると索引が作成される
●テーブルの削除は　DROP　TABLE

-------------------------------------------------------------------------------------------

【行と表の挿入】INSERT

【新規レコードの挿入】
　●INSERT文を使用する
　●VALUSE句を使用して、１行ずつレコードを挿入することができる
　●SELECT文を指定して、表のデータを挿入することができる（レコード/値のコピー）
　●挿入を取り消す場合は、トランザクションをロールバック(ROLLBACK)する

　●構文　１行挿入
　INSERT INTO テーブル名
　VALUES(値1，値2,....)

  ●例
  INSERT INTO smp
  VALUES(50,'開発部')

【注意事項】
・制約違反、不適切なデータ型、有効桁数を超える値を指定すると実行時にエラーになる
・対象列を指定する場合は、NOT NULL、PRIMARY KEYを指定した列を含むようにする。
・値を入れない場合は、列指定を省略するか、VALUES句においてNULLと記述する

【NULLの挿入例】
●指定しない列はNULLになる
●明示的にNULLを記述する（他人が見たときに意図的にNULLにしたのが明確になる）

-----------------------------------------------------------------------------------

【SELECTの挿入例】
●INSERT INTO テーブル名
　SELECT *｜列名 |式　FROM　テーブル名
  WHERE 検索条件

●例 
INSERT INTO smp2 SELECT * FROM smp;
(表に格納されているレコードを挿入対象にする場合は、挿入先の列の数とデータ型を合わせる必要がある)

【既存値の変更】
●UODATE文を使用する
●WHERE句の条件に一致したレコードの対象列の値を変更することができる
●対象の複数の列を変更することができる
●変更を取り消す場合は、トランザクションをロールバック(ROLLBACK)する

●構文
UPDATE テーブル名
SET 列名１＝値１| 式１[列名２＝値２[式１,.....]]
[WHERE　対象レコード条件]

●例
UPDATE smp
SET sal=sal*1.1 , smpno=NULL
WHERE smpno=7788
（値の代わりに式を指定することも可能。文字列、日付の場合は単一引用符で値も囲む）


【注意事項】
・WHERE句を指定しない場合は全レコードが対象になる
・制約違反、不適切なデータ型、有効桁数おｗ超える値を指定するとエラーになる
・FOREIGN KEY/参照整合制約により参照されている列は変更できない場合がある

---------------------------------------------------------------------------------------

【レコードの削除】
●DELETE文を使用する
●WHERE句の条件に一致したレコードの対象の値を削除することができる
●削除を取り消す場合は、トランザクションをロールバックする

●構文
DELETE FROM テーブル名
[WHERE 対象レコード条件]

●例
DELETE FROM smp
WHERE smpno = 50　（テーブルの５０番を削除する）
(FOREIGN KEY/参照整合制約により参照されるレコードは参照しているレコードを先に削除する)

【注意事項】
●WHERE句を指定しない場合は全レコードが削除対象となる
●全行削除しても、テーブルは削除されない
●FOREIGN KEY/参照整合制約により参照されているレコードは削除できない場合がある



【変更の確定と取り消し】
●変更処理は、確定または取り消しを行う必要がある
●複数の変更をまとめて確定/取り消しすることができる
●確定　　　COMMIT文を使用
●取り消し　ROLLBACK文を使用
●確定した変更を取り消すことはできない


【トランザクション】
●最後に変更を確定、取り消ししてから次の確定、取り消しまでの一連の処理のこと
●BEGIN/START TRANSACTION文で開始する
（BEGIN/START TRANSACTION文を使用せずにトランザクションを開始するRDBMCもある）

----------------------------------------------------------------------------------

【データの表示】
●SELECT文を使用
●SELECT句に表示する列を指定する
●WHERE句を使用して表示対象となるレコードを限定することができる
●ORDER BY句を使用してデータの表示順を指定するこちができる

●構文
SELECT *列名|式|定数
FROM　テーブル名
[WHERE 表示対象を限定する条件]
[ORDER BY　並び順の基準にする列]

●例
SELECT　列１、列２....
FROM smp

●例
SELECT sal + (sal * comm)
FROM smp
(足し算、引き算、掛け算、割り算が混在する場合、掛け算、割り算が先に処理される
　かっこを使って処理の順番を変えることができる)

【定数を表示する】
●例
SELECT　100000　FROM　smp
●例
SELECT '名前は',ename
FROM smp
（数値以外の定数は''で囲む。レコード件数分の定数が表示される）

【注意事項】
●SELECT句で指定した列名が結果表示のタイトルになる
●式や定数を指定した場合は、指定した式や定数がタイトルとして表示される

【別名を指定する】
SELECT　[AS] 別名
FROM　テーブル名

SELECT [AS] ”別名”
FROM　テーブル名
（命名規則に反する別名を使用する場合は、""で別名を囲む）


【重複値を省いて表示する】　DISTINICT
SELECT　DISTINCT　列名
FROM　テーブル名
●例
SELECT　DISTINCT smpno,job
FROM smp
(列名のかわりに式や定数を指定しても構わない。別名を指定することも可能)

【注意事項】
●DISTINCTは、表示するレコード全体に対して重複を省く指定をする
●重複の列を指定する場合は、SELECT句の先頭に１度だけ指定する
●間違った例
SELECT smpno,DISTINST job
FROM smp
(jobだけ重複を省く、という書き方はできない)


【表示対象レコードを限定する】WHERE
SELECT (列、式、定数)
FROM テーブル名
WHERE 列名 比較演算子 (列、式、定数)
(比較演算子の左右どちらかに列名を記述してもOK)


【複数の条件を指定する】AND / OR
....
WHERE 列名　比較演算子　(列名、式、定数)
AND | OR 列名 比較演算子　(列名、式、定数)
(ANDとORが混在する場合、ANDが先に処理される。かっこを使用して処理の順番を変えることが可能)


【範囲を指定する】BETWEEN
例
SELECT FROM smp
WHERE smpno NOT BETWEEN 10 AND 20
(NOT BETWEEN AND は OR と同じ意味)


【値のリストと一致するものを表示する】　IN
例
SELECT FROM smp
WHERE smpno IN (1123444)
(INは、=OR=　と同じ)


【指定した値を含むものを表示する】　LIKE
●任意の１文字は、アンダースコア(＿)
●０文字以上は、パーセント(%)
例
SELECT FROM smp
WHERE aname LIKE'_〇〇〇%'
(ESCAPEを使用してアンダースコア、パーセントそのものを含むものを求めることもできる)


【NULLを条件にする】　comm
SELECT FROM ｓｍｐ
WHERE comm is NULL
(comm=NULL または comm<>NULLと記述してもエラーにはならないが正しい値は得られない)


【列の並び順を指定する】　ORDER BY
SELECT FROM テーブル名
[WHER 表示対象を限定する条件]
ORDER BY 列名１ [ASC | DESC]
(デフォルトの並び順はASC（昇順）)


【注意事項】
●ORDER BY句を指定しない場合、どんな順で表示されるか分からない
●NULLが含まれる場合、RDBMSによっては表示順が異なる
●NULLを先頭(NULL FIRST)か最後(NULL LAST)に表示するか指定できる場合もある

---------------------------------------------------------------------------------------

【データ活用】
●合計、平均など値の集計をしたい
●複数の表のデータを１つの表から検索したかのように表示したい
●２つの表において、一致するデータを表示したい
●２つの表において、一致しないデータを表示したい


【集計値を求める】
●SELECTに集計関数を使用して求める
●集計関数はWHEREでは使用できない
●部門ごとのように何かのグループ単位で集計する場合は、GROUP BY句えお使用する


●構文
SELECT 集計関数
[,グループ処理基準列][,グループ処理基準列]
FROM　テーブル名
[WHERE　　　表示対象を限定する条件]　➡省略できる
[GROUP BY　グループ処理基準列]　　　➡省略できる
[ORDER BY　並び順の基準にする列]　　➡省略できる

●集計値を表示対象にしたい場合は、HAVINGを使用する

●例
SELECT COUNT(*),COUNT(comm),AVG(comm)
FROM smp
●例
SELECT smpno,SUM(sal),MAX(sal),MIN(sal)
FROM smp
GROUP BY smpno
●COUNT(*)はレコード件数、COUNT(comm)はcomm列におけるNULL以外のレコード件数

【集計関数】
●ＳＵＭ　　　合計　数値型のみ　
●ＡＶＧ　　　平均　数値型のみ
●ＭＡＸ　　　最大　日付の場合、最も新しい日付。文字列の場合、最も大きな文字コード
●ＭＩＮ　　　最小　日付の場合、最も古い日付。　文字列の場合、最も小さな文字コード
●ＣＯＵＮＴ　件数　指定した列のNULL以外の件数
　　　　　　　　　　アスタリスクを指定すると全レコード件数
　　　　　　　　　　(検索条件が指定してある場合は条件に一致したレコード)
　　　　　　　　　　DISTINCTを使用すると一意な値の件数(重複を省く)


【集計値を表示条件にする】
●構文
SELECT 集計関数
[グループ処理基準列],[グループ処理基準列]
FROM テーブル名
[GROUP BYグループ処理基準列]
HAVING　集計関数　比較演算子　値|式
※HAVINGには集計関数以外(GROUP BY句で指定した列)を記述することが可能。


【注意事項】
●SELECT, HAVING. ORDER BY句には集計関数またはGUROUP BY句で指定し列のみ記述する
●集計関数を表示条件に使用する場合は、HAVINGを使用する
●列を表示条件に使用する場合は、WHERE句を使用する(HAVINGの使用は避ける)

-------------------------------------------------------------------

【結合】
●複数のテータを１つの表から取り出したかのように１行にして表示することができる。
●同じ表の異なるレコードを結合することができる。

【結合方法】
●結合条件に使用する列が同じ列名、同じデータ型の場合「NATURAL JOIN」を使用することができる
●同じ名前に列複数あるが、その中の一部しか結合条件に使用しない場合「USING」を使用する。
●結合列の名前は同じだが、データ型が異なる場合、USINGを使用する
●結合列の名前やデータ型の一致を気にせずに「JOIN ON」を使用して、結合することができる


【JOIN ON を使用した結合】
●構文
SELECT 表示したい列
FROM 結合する１つめの表
JOIN 結合する２つめの表
ON 1つめの表と、２つめの表を結合する条件
[JOIN 結合する３つめの条件]
[ON 2つめの表と３つめの表を結合する条件]
※結合対象となるレコードを限定したい場合は、すべての結合条件を記述した後にWHEREで指定する

●例
SELECT d.deptno, d.dname, e.empno, e.ename
FROM dept d (分かりやすくするため別名を付けてここでは「d」と呼ぶ)
JOIN ON emp e (分かりやすくするため別名を付けてここでは「e」と呼ぶ)
ON d.deptno = e.deptno (同名のdeptなので明確に分ける必要がある)

【注意事項】
●同じ名前の列が存在する場合は、列名の前に表名を修飾する(NATURAL JOINが使える)
●FROM、JOIN句において、表別名を指定することができる
●表別名を用いた場合、列名の修飾は表別名を使用する
●複数の条件を組み合わせて結合する必要がある場合は、ON句において「AND」を使用する


【結合列名が同じ場合】
●構文
SELECT 表示したい列
FROM 結合する１つめの表
NATURAL JOIN 結合する２つめの表
※結合条件を指定する必要はない

【注意事項】
●同じ名前、同じデータ型の列がすべて結合条件に使用される
●同じ名前の列が存在しても、表明で修飾してはいけない

【結合列名の一部を使用する場合】
構文
SELECT 表示したい列
FROM 結合する１つめの表
JOIN　結合する２つめの表
USING (結合条件に使用する列)
      ([,結合条件に使用する列])
※列名は同じだが、データ型が異なる場合もUSINGを使用する

------------------------------------------------------------------

【副問い合わせ】
●２つの表において、一致するデータまたは一致してないデータを表示することができる
●単一列を戻すことも複数列を戻すもともできる

【注意事項】
●副問い合わせが単一レコードを戻す場合と複数レコードを戻す場合では、
　比較演算子を変える必要がある。
　(どちらか分からない場合は複数れーどを戻すと考えて記述する)
●副問い合わせからNULLが戻される場合は「NOT IN」ではなく「NOT EXISTS」を使用する。
　(あるいは、副問い合わせ内でNULLを対象から外す)

●構文
SELECT 表示したい列
FROM 表示する列が含まれる表
WHERE 列名　比較演算子
    (SELECT 比較する列名
     FROM 比較する列が含まれる表
     WHERE 対象レコードの条件)
※ORDER BY は副問い合わせに含めることはできない

●例
SELECT department_id, sdepartment_name
FROM departments
WHERE department_id =
  (SELECT department_id
   FROM employees)
   WHERE employee_id = 102)
➡102番さんが所属している部門番号と部門名は何かを副問い合わせする記述


【まとめ】
●集計関数を用いて、合計、平均などを求めることができる
●グループ単位で集計する場合は「GROUP BY」句を使用する
●結合には「JOIN ON」,「NATURAL JOIN」,「USING」を使用する方法がある
●副問い合わせを用いて２つの表に一致するレコード、一致しないレコードを求めることができる
●一致する行を求めるのは「EXISTS」、
　一致しない行を求めるのは「NOT EXISTS」を使用する
