●クラス
・クラスはプログラム全体の設計図。
　クラスブロックで囲われた領域がこのプログラムで実施したい具体的な処理内容であることを表す。
・具体的に１つのファイルには1つのクラスだけ存在する。
・ファイル名とクラス名は同じであるように定義する。
・クラスブロックは　class クラス名 { } と定義する
・クラス名は命名規則は
　・先頭を大文字、それ以外は小文字
　・言葉の区切りは大文字

●メソッド
・メソッドはプログラムのパーツ(一部機能の設計図)
・メソッドブロックで囲われた領域でパーツがどのように動くかを記述する。
　メソッドのことを「関数」とよぶこともある
・基本的に１つの機能ごとに１つのメソッドを作成する
・１つのクラスの複数メソッドを定義することは可能で、クラスブロックの直下に並べて書いていく
　(クラスブロックの中にメソッドブロックは定義できない)
・メソッドブロックか下記のように記述する
　[修飾子] 戻り値の型　メソッド名(引数の型 引数名, ...)　{命令群}
・メソッド名の命名規則は
　・先頭を小文字、以降も小文字、言語の区切りは大文字
　・予約語でない英単語と略語を組み合わせることが多い


●引数のないメソッド、戻り値のないメソッド
・メソッドの中には引数が不要なメソッドや、戻り値のないメソッドが存在する。
・引数が不要なメソッドは下記のように仮引数を書かずに定義すればＯＫ。
　[修飾子] 戻り値の型　メソッド名() {命令群}
・戻り値のないメソッドは「戻り値の型」を書くべき箇所に「void」と記述すれば、
　「戻り値が存在しない」という意味になる。
　[修飾子] void 戻り値の型　メソッド名(引数の型、引数名、…) {命令群}


●mainメソッド
・mainメソッドはプログラムが起動されて必ず一番初めに実行されるメソッド。
　(mainメソッドが存在していなければ、必ずエラーになる)
・mainメソッド内の処理をすべて実行し終えたらプリグラム終了となる。
　(戻り値を返す相手がいないため、戻り値の型はvoidが設定される)
・mainメソッドは書き方が決めれている。
　public static void main(String [] args) { }


●オーバーロード
・メソッドはメソッド名だけではなく、「引数の型」や「引数の数」でも区別される。
　逆にメソッド名が合致していても引数の型や引数の数が間違っていればそのメソッドを呼び出すことができる。
・「引数の型」や「引数の数」が違っていればクラス内で同名のメソッドを複数定義することが可能。
　この機能を「オーバーロード」という。


●スコープとローカル変数
・変数には有効可能な範囲があり、これをスコープという。(ブロック内＝スコープ)
　変数宣言されたブロック内({}で囲まれた範囲)がその変数のスコープ範囲となる。
　スコープ外からのアクセスは全てエラーとなる。
・メソッド内で定義される変数を「ローカル変数」という。
　当然、スコープ外である他メソッドからは参照したり代入したりできない。
・ブロック内の全ての処理が実行されるとそのブロックをスコープとする変数は役目を果たした
　としてメモリ上から消去される。
・ブロックがネスト(入れ子)構造になっている場合、内側のブロックから外側で宣言された変数に
　アクセスすることが可能。
　ネストは関係なく、単純に変数宣言されたブロック内すべてがその変数のスコープだと理解する。
・特定ができない為、同じスコープ内で同じ名前の変数を定義することはできない。
　(スコープが別であれば変数名について気にすることはない)
・{}の外での変数宣言となるが、メソッドの仮引数はメソッドブロック内をスコープとしていることに注意する。

・シンボルが見つからないエラー文は、変数が見つからないよという意味になる。

















●APIとは
Application Program InterfaceとはJAVAが提供してくれている便利なソースコード群のこと。
printlnメソッドもこのAPIで定義されているものになる。
JAVAの開発環境には必ず必要である。

・APIはパッケージと呼ばれるフォルダのようなもので管理されている。
・APIは基本的に使用したいクラスをインポートすることで使用可能になる。
　インポート方法は
　（クラスブロックの外側で）import　パッケージ名.クラス名
・APIの中でも java.langパッケージで管理されているクラス群は、
　その利用頻度があまりにも高いためにインポート不要で使用可能になっている。

●Array List
・要素数を自由に変更できる配列のようなもの
　➡ List<型> 変数名 = new ArrayList<型>();
・提供されている主な機能
  get(インデックス)...インデックスに該当すデータを参照
  add(データ)...ArrayListにデータを追加する。追加された順に０からインデックスが振られる
  size()...  ArrayListの要素数を求める
  isEmpty()...リストに要素がない場合trueを返す
  remove(インデックス)...インデックスに該当するデータを削除

・ArrayListはjava.untilパッケージに管理されているAPIであるため
　使用時はインポートする必要がある。
　Java.until.Listもインポートしなければならない点に注意。
・配列同様に同じ型の要素を扱うが、参照型しか扱えない点が大きく違う。
　プリミティブ型のデータで扱いたい場合は対応するラッパーくクラスを型として
　指定しなければならない。

●パッケージ
・複数のクラスをグループ化するためのもの。
　すべてのJavaプログラムは必ず何かしらのパッケージに属している。
　パッケージで管理されていあにファイルはソースコードして認められない。
・それぞれのソースコードの先頭で「パッケージ宣言」することで、そのクラス所属する
　パッケージを定義することができる。
　➡ package パッケージ名；
・必ず同じ名前のフォルダで管理されなければならない。
　パッケージ＝フォルダの認識で大丈夫
・パッケージ宣言で指定するパッケージ名はCLASSPATHからの相対パスとなる。
　
　CLASSPATHは環境変数の１つで、Java実行のアクセス先としてPC上における
　Javaのクラスやパッケージの格納場所を管理する。


●宣言不要のパッケージ
・実行ファイルが存在するフォルダ(カレントディレクトリ)を自動的にパッケージとして扱われる。
　これを「無名のパッケージと呼ぶ」
・無名のパッケージに格納されているファイルは全てpackage宣言が不要。


●パッケージとインポートの要否
・同じパッケージ内であればインポート宣言なしで他のクラスを利用することができる(インポート不要)
・パッケージ外のクラスを利用する場合はインポート宣言が必要になる。
　(APIのjava.langパッケージを除く)

●
